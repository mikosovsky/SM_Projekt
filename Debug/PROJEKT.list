
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004888  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000000c  08004a84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08004a84  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013878  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e2  00000000  00000000  000338b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00036ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cf4  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143ea  00000000  00000000  0005d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee86e  00000000  00000000  00071cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016052c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  0016057c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004a38 	.word	0x08004a38

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004a38 	.word	0x08004a38

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <delay+0x30>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000cfa:	bf00      	nop
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <delay+0x30>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3f9      	bcc.n	8000cfc <delay+0x14>
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000028 	.word	0x20000028
 8000d1c:	00000000 	.word	0x00000000

08000d20 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7f1b      	ldrb	r3, [r3, #28]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	f040 8083 	bne.w	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11a      	bne.n	8000d70 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fc27 	bl	8003590 <HAL_TIM_ReadCapturedValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d46:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020a 	bic.w	r2, r2, #10
 8000d5c:	621a      	str	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a1a      	ldr	r2, [r3, #32]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0202 	orr.w	r2, r2, #2
 8000d6c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000d6e:	e063      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d15f      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f002 fc08 	bl	8003590 <HAL_TIM_ReadCapturedValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d84:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e00f      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d909      	bls.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dc8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fb5c 	bl	800048c <__aeabi_ui2d>
 8000dd4:	a31a      	add	r3, pc, #104	; (adr r3, 8000e40 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dda:	f7ff fbd1 	bl	8000580 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	f7ff fcf1 	bl	80007d4 <__aeabi_ddiv>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fdd3 	bl	80009a4 <__aeabi_d2uiz>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e04:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 020a 	bic.w	r2, r2, #10
 8000e1a:	621a      	str	r2, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a12      	ldr	r2, [r2, #32]
 8000e26:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0202 	bic.w	r2, r2, #2
 8000e36:	60da      	str	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	b020c49c 	.word	0xb020c49c
 8000e44:	3fa16872 	.word	0x3fa16872
 8000e48:	20000610 	.word	0x20000610
 8000e4c:	20000604 	.word	0x20000604
 8000e50:	20000608 	.word	0x20000608
 8000e54:	2000060c 	.word	0x2000060c
 8000e58:	20000611 	.word	0x20000611
 8000e5c:	20000028 	.word	0x20000028

08000e60 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HCSR04_Read+0x38>)
 8000e6c:	f000 ff52 	bl	8001d14 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000e70:	200a      	movs	r0, #10
 8000e72:	f7ff ff39 	bl	8000ce8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HCSR04_Read+0x38>)
 8000e7e:	f000 ff49 	bl	8001d14 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HCSR04_Read+0x3c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HCSR04_Read+0x3c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0202 	orr.w	r2, r2, #2
 8000e90:	60da      	str	r2, [r3, #12]
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 fbf7 	bl	8001696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f80e 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f92c 	bl	8001108 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000eb0:	f000 f8cc 	bl	800104c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eb4:	f000 f8fa 	bl	80010ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000eb8:	f000 f86e 	bl	8000f98 <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000ebc:	f7ff ffd0 	bl	8000e60 <HCSR04_Read>
	  HAL_Delay(200);
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f000 fc45 	bl	8001750 <HAL_Delay>
	  HCSR04_Read();
 8000ec6:	e7f9      	b.n	8000ebc <main+0x1c>

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fda6 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eec:	f001 f874 	bl	8001fd8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemClock_Config+0xc8>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f3c:	2348      	movs	r3, #72	; 0x48
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 f853 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f58:	f000 f9de 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fae1 	bl	8002540 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f84:	f000 f9c8 	bl	8001318 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3750      	adds	r7, #80	; 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_TIM1_Init+0xb0>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fbe:	2247      	movs	r2, #71	; 0x47
 8000fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fe4:	f002 f8c2 	bl	800316c <HAL_TIM_IC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fee:	f000 f993 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <MX_TIM1_Init+0xac>)
 8001006:	f002 fcf9 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001010:	f000 f982 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_TIM1_Init+0xac>)
 800102c:	f002 fa14 	bl	8003458 <HAL_TIM_IC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001036:	f000 f96f 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000028 	.word	0x20000028
 8001048:	40010000 	.word	0x40010000

0800104c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART3_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART3_UART_Init+0x58>)
 8001090:	f002 fd60 	bl	8003b54 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f93d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000074 	.word	0x20000074
 80010a8:	40004800 	.word	0x40004800

080010ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ba:	2206      	movs	r2, #6
 80010bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f0:	f000 fe29 	bl	8001d46 <HAL_PCD_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 f90d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000fc 	.word	0x200000fc

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b78      	ldr	r3, [pc, #480]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a77      	ldr	r2, [pc, #476]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b75      	ldr	r3, [pc, #468]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a6b      	ldr	r2, [pc, #428]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b69      	ldr	r3, [pc, #420]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a5f      	ldr	r2, [pc, #380]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <MX_GPIO_Init+0x1f8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a59      	ldr	r2, [pc, #356]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <MX_GPIO_Init+0x1f8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ae:	4b54      	ldr	r3, [pc, #336]	; (8001300 <MX_GPIO_Init+0x1f8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a53      	ldr	r2, [pc, #332]	; (8001300 <MX_GPIO_Init+0x1f8>)
 80011b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <MX_GPIO_Init+0x1f8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011cc:	484d      	ldr	r0, [pc, #308]	; (8001304 <MX_GPIO_Init+0x1fc>)
 80011ce:	f000 fda1 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <MX_GPIO_Init+0x200>)
 80011da:	f000 fd9b 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	484a      	ldr	r0, [pc, #296]	; (800130c <MX_GPIO_Init+0x204>)
 80011e4:	f000 fd96 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4844      	ldr	r0, [pc, #272]	; (8001310 <MX_GPIO_Init+0x208>)
 8001200:	f000 fbdc 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001204:	2332      	movs	r3, #50	; 0x32
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001214:	230b      	movs	r3, #11
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	483c      	ldr	r0, [pc, #240]	; (8001310 <MX_GPIO_Init+0x208>)
 8001220:	f000 fbcc 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001224:	2386      	movs	r3, #134	; 0x86
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001234:	230b      	movs	r3, #11
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4835      	ldr	r0, [pc, #212]	; (8001314 <MX_GPIO_Init+0x20c>)
 8001240:	f000 fbbc 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001244:	f244 0381 	movw	r3, #16513	; 0x4081
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4829      	ldr	r0, [pc, #164]	; (8001304 <MX_GPIO_Init+0x1fc>)
 800125e:	f000 fbad 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4823      	ldr	r0, [pc, #140]	; (8001308 <MX_GPIO_Init+0x200>)
 800127c:	f000 fb9e 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001292:	230b      	movs	r3, #11
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <MX_GPIO_Init+0x1fc>)
 800129e:	f000 fb8d 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <MX_GPIO_Init+0x204>)
 80012ba:	f000 fb7f 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_GPIO_Init+0x204>)
 80012d2:	f000 fb73 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e8:	230b      	movs	r3, #11
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_GPIO_Init+0x204>)
 80012f4:	f000 fb62 	bl	80019bc <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400
 8001308:	40021000 	.word	0x40021000
 800130c:	40021800 	.word	0x40021800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020000 	.word	0x40020000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x44>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x44>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x44>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x44>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x44>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_TIM_IC_MspInit+0x8c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d130      	bne.n	80013f0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_TIM_IC_MspInit+0x90>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <HAL_TIM_IC_MspInit+0x94>)
 80013dc:	f000 faee 	bl	80019bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	201b      	movs	r0, #27
 80013e6:	f000 fab2 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013ea:	201b      	movs	r0, #27
 80013ec:	f000 facb 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0aa      	sub	sp, #168	; 0xa8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2284      	movs	r2, #132	; 0x84
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f003 faff 	bl	8004a28 <memset>
  if(huart->Instance==USART3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_UART_MspInit+0xb4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d13c      	bne.n	80014ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800143a:	2300      	movs	r3, #0
 800143c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4618      	mov	r0, r3
 8001444:	f001 faa2 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800144e:	f7ff ff63 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_UART_MspInit+0xb8>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_UART_MspInit+0xb8>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_MspInit+0xb8>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_UART_MspInit+0xb8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_UART_MspInit+0xb8>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_UART_MspInit+0xb8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001490:	2301      	movs	r3, #1
 8001492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149c:	2307      	movs	r3, #7
 800149e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_UART_MspInit+0xbc>)
 80014aa:	f000 fa87 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37a8      	adds	r7, #168	; 0xa8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004800 	.word	0x40004800
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020c00 	.word	0x40020c00

080014c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0ac      	sub	sp, #176	; 0xb0
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2284      	movs	r2, #132	; 0x84
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fa9f 	bl	8004a28 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f2:	d159      	bne.n	80015a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fa41 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001510:	f7ff ff02 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6313      	str	r3, [r2, #48]	; 0x30
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800152c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001546:	230a      	movs	r3, #10
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001550:	4619      	mov	r1, r3
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <HAL_PCD_MspInit+0xf0>)
 8001554:	f000 fa32 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001570:	4619      	mov	r1, r3
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <HAL_PCD_MspInit+0xf0>)
 8001574:	f000 fa22 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 800157e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001582:	6353      	str	r3, [r2, #52]	; 0x34
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6453      	str	r3, [r2, #68]	; 0x44
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_PCD_MspInit+0xec>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	37b0      	adds	r7, #176	; 0xb0
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f884 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM1_CC_IRQHandler+0x10>)
 8001612:	f001 fe02 	bl	800321a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000028 	.word	0x20000028

08001620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f003 f9b5 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff fc13 	bl	8000ea0 <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001688:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 800168c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001690:	20000618 	.word	0x20000618

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>

08001696 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f94c 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f805 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fe3d 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f967 	bl	80019a2 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f92f 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	20000614 	.word	0x20000614

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000614 	.word	0x20000614

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	05fa0000 	.word	0x05fa0000

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff29 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff3e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff31 	bl	80017fc <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e175      	b.n	8001cc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8164 	bne.w	8001cc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_GPIO_Init+0x56>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80be 	beq.w	8001cc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b5e:	4a61      	ldr	r2, [pc, #388]	; (8001ce4 <HAL_GPIO_Init+0x328>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_GPIO_Init+0x32c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d037      	beq.n	8001bfa <HAL_GPIO_Init+0x23e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a57      	ldr	r2, [pc, #348]	; (8001cec <HAL_GPIO_Init+0x330>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d031      	beq.n	8001bf6 <HAL_GPIO_Init+0x23a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_GPIO_Init+0x334>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d02b      	beq.n	8001bf2 <HAL_GPIO_Init+0x236>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a55      	ldr	r2, [pc, #340]	; (8001cf4 <HAL_GPIO_Init+0x338>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d025      	beq.n	8001bee <HAL_GPIO_Init+0x232>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_GPIO_Init+0x33c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01f      	beq.n	8001bea <HAL_GPIO_Init+0x22e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a53      	ldr	r2, [pc, #332]	; (8001cfc <HAL_GPIO_Init+0x340>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d019      	beq.n	8001be6 <HAL_GPIO_Init+0x22a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_GPIO_Init+0x344>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a51      	ldr	r2, [pc, #324]	; (8001d04 <HAL_GPIO_Init+0x348>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x222>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a50      	ldr	r2, [pc, #320]	; (8001d08 <HAL_GPIO_Init+0x34c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x21e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_GPIO_Init+0x350>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001bd2:	2309      	movs	r3, #9
 8001bd4:	e012      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	e010      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bda:	2308      	movs	r3, #8
 8001bdc:	e00e      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001be2:	2306      	movs	r3, #6
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x240>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x328>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a34      	ldr	r2, [pc, #208]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_GPIO_Init+0x354>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae86 	bls.w	80019dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40022400 	.word	0x40022400
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d48:	b08f      	sub	sp, #60	; 0x3c
 8001d4a:	af0a      	add	r7, sp, #40	; 0x28
 8001d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e116      	b.n	8001f86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fba6 	bl	80014c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fb86 	bl	80044a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	687e      	ldr	r6, [r7, #4]
 8001da4:	466d      	mov	r5, sp
 8001da6:	f106 0410 	add.w	r4, r6, #16
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dba:	1d33      	adds	r3, r6, #4
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	6838      	ldr	r0, [r7, #0]
 8001dc0:	f002 fb1a 	bl	80043f8 <USB_CoreInit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0d7      	b.n	8001f86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fb74 	bl	80044ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e04a      	b.n	8001e7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	333d      	adds	r3, #61	; 0x3d
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	333c      	adds	r3, #60	; 0x3c
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	b298      	uxth	r0, r3
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3344      	adds	r3, #68	; 0x44
 8001e24:	4602      	mov	r2, r0
 8001e26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3340      	adds	r3, #64	; 0x40
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	334c      	adds	r3, #76	; 0x4c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3354      	adds	r3, #84	; 0x54
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3af      	bcc.n	8001de8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e044      	b.n	8001f18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3b5      	bcc.n	8001e8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	687e      	ldr	r6, [r7, #4]
 8001f2a:	466d      	mov	r5, sp
 8001f2c:	f106 0410 	add.w	r4, r6, #16
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f40:	1d33      	adds	r3, r6, #4
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	6838      	ldr	r0, [r7, #0]
 8001f46:	f002 fb0d 	bl	8004564 <USB_DevInit>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e014      	b.n	8001f86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f80b 	bl	8001f90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fccb 	bl	800491a <USB_DevDisconnect>

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	10000003 	.word	0x10000003

08001fd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e291      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8087 	beq.w	800212a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800201c:	4b96      	ldr	r3, [pc, #600]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b04      	cmp	r3, #4
 8002026:	d00c      	beq.n	8002042 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002028:	4b93      	ldr	r3, [pc, #588]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d112      	bne.n	800205a <HAL_RCC_OscConfig+0x62>
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002040:	d10b      	bne.n	800205a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002042:	4b8d      	ldr	r3, [pc, #564]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d06c      	beq.n	8002128 <HAL_RCC_OscConfig+0x130>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d168      	bne.n	8002128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e26b      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x7a>
 8002064:	4b84      	ldr	r3, [pc, #528]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a83      	ldr	r2, [pc, #524]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e02e      	b.n	80020d0 <HAL_RCC_OscConfig+0xd8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x9c>
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7e      	ldr	r2, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b7c      	ldr	r3, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7b      	ldr	r2, [pc, #492]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800208c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xd8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b73      	ldr	r3, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a72      	ldr	r2, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xd8>
 80020b8:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6b      	ldr	r2, [pc, #428]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb2e 	bl	8001738 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fb2a 	bl	8001738 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e21f      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff fb1a 	bl	8001738 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fb16 	bl	8001738 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e20b      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b57      	ldr	r3, [pc, #348]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x110>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d069      	beq.n	800220a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002136:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x190>
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x17a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1df      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	493d      	ldr	r1, [pc, #244]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e040      	b.n	800220a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a38      	ldr	r2, [pc, #224]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff facc 	bl	8001738 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff fac8 	bl	8001738 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1bd      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4929      	ldr	r1, [pc, #164]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff faa8 	bl	8001738 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff faa4 	bl	8001738 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e199      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d038      	beq.n	8002288 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff fa85 	bl	8001738 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff fa81 	bl	8001738 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e176      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x23a>
 8002250:	e01a      	b.n	8002288 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_RCC_OscConfig+0x280>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff fa6b 	bl	8001738 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fa67 	bl	8001738 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d903      	bls.n	800227c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e15c      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
 8002278:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a4 	beq.w	80023de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10d      	bne.n	80022be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a87      	ldr	r2, [pc, #540]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022be:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022ca:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7e      	ldr	r2, [pc, #504]	; (80024c8 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff fa2f 	bl	8001738 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff fa2b 	bl	8001738 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e120      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x31a>
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e02d      	b.n	800236e <HAL_RCC_OscConfig+0x376>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x33c>
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e01c      	b.n	800236e <HAL_RCC_OscConfig+0x376>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x35e>
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0x376>
 8002356:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f9df 	bl	8001738 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff f9db 	bl	8001738 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0ce      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <HAL_RCC_OscConfig+0x386>
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7ff f9c9 	bl	8001738 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff f9c5 	bl	8001738 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a3b      	ldr	r2, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a4 	beq.w	8002530 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d06b      	beq.n	80024cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d149      	bne.n	8002490 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f996 	bl	8001738 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff f992 	bl	8001738 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e087      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	4313      	orrs	r3, r2
 8002454:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800245a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f966 	bl	8001738 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff f962 	bl	8001738 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e057      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x478>
 800248e:	e04f      	b.n	8002530 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff f94c 	bl	8001738 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff f948 	bl	8001738 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e03d      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4ac>
 80024c2:	e035      	b.n	8002530 <HAL_RCC_OscConfig+0x538>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x544>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d028      	beq.n	800252c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d121      	bne.n	800252c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002502:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 020f 	bic.w	r2, r3, #15
 800256e:	4965      	ldr	r1, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7ff f880 	bl	8001738 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff f87c 	bl	8001738 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 020f 	bic.w	r2, r3, #15
 800267a:	4922      	ldr	r1, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1cc>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1d0>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe ffdc 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08004a50 	.word	0x08004a50
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b094      	sub	sp, #80	; 0x50
 800271e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
 8002724:	2300      	movs	r3, #0
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002730:	4b79      	ldr	r3, [pc, #484]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d00d      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x40>
 800273c:	2b08      	cmp	r3, #8
 800273e:	f200 80e1 	bhi.w	8002904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x34>
 8002746:	2b04      	cmp	r3, #4
 8002748:	d003      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x3a>
 800274a:	e0db      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_GetSysClockFreq+0x204>)
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002750:	e0db      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_GetSysClockFreq+0x208>)
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002756:	e0d8      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002758:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002762:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d063      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	2200      	movs	r2, #0
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
 8002778:	63fa      	str	r2, [r7, #60]	; 0x3c
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
 8002782:	2300      	movs	r3, #0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
 8002786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800278a:	4622      	mov	r2, r4
 800278c:	462b      	mov	r3, r5
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0159      	lsls	r1, r3, #5
 8002798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279c:	0150      	lsls	r0, r2, #5
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4621      	mov	r1, r4
 80027a4:	1a51      	subs	r1, r2, r1
 80027a6:	6139      	str	r1, [r7, #16]
 80027a8:	4629      	mov	r1, r5
 80027aa:	eb63 0301 	sbc.w	r3, r3, r1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027bc:	4659      	mov	r1, fp
 80027be:	018b      	lsls	r3, r1, #6
 80027c0:	4651      	mov	r1, sl
 80027c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c6:	4651      	mov	r1, sl
 80027c8:	018a      	lsls	r2, r1, #6
 80027ca:	4651      	mov	r1, sl
 80027cc:	ebb2 0801 	subs.w	r8, r2, r1
 80027d0:	4659      	mov	r1, fp
 80027d2:	eb63 0901 	sbc.w	r9, r3, r1
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ea:	4690      	mov	r8, r2
 80027ec:	4699      	mov	r9, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	eb18 0303 	adds.w	r3, r8, r3
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	462b      	mov	r3, r5
 80027f8:	eb49 0303 	adc.w	r3, r9, r3
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800280a:	4629      	mov	r1, r5
 800280c:	024b      	lsls	r3, r1, #9
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002814:	4621      	mov	r1, r4
 8002816:	024a      	lsls	r2, r1, #9
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281e:	2200      	movs	r2, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
 8002822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002828:	f7fe f8dc 	bl	80009e4 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002834:	e058      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	099b      	lsrs	r3, r3, #6
 800283c:	2200      	movs	r2, #0
 800283e:	4618      	mov	r0, r3
 8002840:	4611      	mov	r1, r2
 8002842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0159      	lsls	r1, r3, #5
 800285e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002862:	0150      	lsls	r0, r2, #5
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4641      	mov	r1, r8
 800286a:	ebb2 0a01 	subs.w	sl, r2, r1
 800286e:	4649      	mov	r1, r9
 8002870:	eb63 0b01 	sbc.w	fp, r3, r1
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002888:	ebb2 040a 	subs.w	r4, r2, sl
 800288c:	eb63 050b 	sbc.w	r5, r3, fp
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	00eb      	lsls	r3, r5, #3
 800289a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289e:	00e2      	lsls	r2, r4, #3
 80028a0:	4614      	mov	r4, r2
 80028a2:	461d      	mov	r5, r3
 80028a4:	4643      	mov	r3, r8
 80028a6:	18e3      	adds	r3, r4, r3
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	464b      	mov	r3, r9
 80028ac:	eb45 0303 	adc.w	r3, r5, r3
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028be:	4629      	mov	r1, r5
 80028c0:	028b      	lsls	r3, r1, #10
 80028c2:	4621      	mov	r1, r4
 80028c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c8:	4621      	mov	r1, r4
 80028ca:	028a      	lsls	r2, r1, #10
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d2:	2200      	movs	r2, #0
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	61fa      	str	r2, [r7, #28]
 80028d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028dc:	f7fe f882 	bl	80009e4 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4613      	mov	r3, r2
 80028e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002902:	e002      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetSysClockFreq+0x204>)
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800290c:	4618      	mov	r0, r3
 800290e:	3750      	adds	r7, #80	; 0x50
 8002910:	46bd      	mov	sp, r7
 8002912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200

08002924 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_RCC_GetHCLKFreq+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002940:	f7ff fff0 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0a9b      	lsrs	r3, r3, #10
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08004a60 	.word	0x08004a60

08002964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002968:	f7ff ffdc 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0b5b      	lsrs	r3, r3, #13
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	08004a60 	.word	0x08004a60

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b4:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	4b66      	ldr	r3, [pc, #408]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	4964      	ldr	r1, [pc, #400]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d017      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	4959      	ldr	r1, [pc, #356]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a04:	d101      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a22:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	494a      	ldr	r1, [pc, #296]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a40:	d101      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 808b 	beq.w	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7c:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fe fe50 	bl	8001738 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe fe4c 	bl	8001738 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e357      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d035      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d02e      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d114      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fe14 	bl	8001738 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fe10 	bl	8001738 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e319      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ee      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b42:	d111      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	4901      	ldr	r1, [pc, #4]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000
 8002b64:	0ffffcff 	.word	0x0ffffcff
 8002b68:	4baa      	ldr	r3, [pc, #680]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4aa9      	ldr	r2, [pc, #676]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b72:	6093      	str	r3, [r2, #8]
 8002b74:	4ba7      	ldr	r3, [pc, #668]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	49a4      	ldr	r1, [pc, #656]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b92:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	4a9e      	ldr	r2, [pc, #632]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	4999      	ldr	r1, [pc, #612]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc0:	4b94      	ldr	r3, [pc, #592]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bce:	4991      	ldr	r1, [pc, #580]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be2:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf0:	4988      	ldr	r1, [pc, #544]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c04:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c12:	4980      	ldr	r1, [pc, #512]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4977      	ldr	r1, [pc, #476]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c48:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	496f      	ldr	r1, [pc, #444]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 020c 	bic.w	r2, r3, #12
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	4966      	ldr	r1, [pc, #408]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	495e      	ldr	r1, [pc, #376]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cae:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	4955      	ldr	r1, [pc, #340]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	494d      	ldr	r1, [pc, #308]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cf2:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4944      	ldr	r1, [pc, #272]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	493c      	ldr	r1, [pc, #240]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	4933      	ldr	r1, [pc, #204]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d66:	492b      	ldr	r1, [pc, #172]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d011      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d88:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d98:	d101      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	4912      	ldr	r1, [pc, #72]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dec:	4909      	ldr	r1, [pc, #36]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d006      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80d9 	beq.w	8002fba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a01      	ldr	r2, [pc, #4]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e12:	e001      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1a:	f7fe fc8d 	bl	8001738 <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e22:	f7fe fc89 	bl	8001738 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e194      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e34:	4b6c      	ldr	r3, [pc, #432]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11d      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e68:	0e1b      	lsrs	r3, r3, #24
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	019a      	lsls	r2, r3, #6
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	071b      	lsls	r3, r3, #28
 8002e88:	4957      	ldr	r1, [pc, #348]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eba:	d129      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed0:	0f1b      	lsrs	r3, r3, #28
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	019a      	lsls	r2, r3, #6
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	071b      	lsls	r3, r3, #28
 8002ef0:	493d      	ldr	r1, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efe:	f023 021f 	bic.w	r2, r3, #31
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	0f1b      	lsrs	r3, r3, #28
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	019a      	lsls	r2, r3, #6
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	4925      	ldr	r1, [pc, #148]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d011      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	019a      	lsls	r2, r3, #6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	061b      	lsls	r3, r3, #24
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	4919      	ldr	r1, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fe fbd0 	bl	8001738 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9c:	f7fe fbcc 	bl	8001738 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0d7      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 80cd 	bne.w	800315c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fce:	f7fe fbb3 	bl	8001738 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fd6:	f7fe fbaf 	bl	8001738 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	d903      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0ba      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002fe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fec:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff8:	d0ed      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02e      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12a      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003030:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	0f1b      	lsrs	r3, r3, #28
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	4944      	ldr	r1, [pc, #272]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	493d      	ldr	r1, [pc, #244]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d11d      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	0f1b      	lsrs	r3, r3, #28
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4929      	ldr	r1, [pc, #164]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d028      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	0e1b      	lsrs	r3, r3, #24
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	4917      	ldr	r1, [pc, #92]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4911      	ldr	r1, [pc, #68]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe fb00 	bl	8001738 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800313c:	f7fe fafc 	bl	8001738 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e007      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315a:	d1ef      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e049      	b.n	8003212 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe f8ea 	bl	800136c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fa5c 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d122      	bne.n	8003276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d11b      	bne.n	8003276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0202 	mvn.w	r2, #2
 8003246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd fd5f 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003262:	e005      	b.n	8003270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9e1 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9e8 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d122      	bne.n	80032ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0204 	mvn.w	r2, #4
 800329a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fd35 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f9b7 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9be 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d122      	bne.n	800331e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0208 	mvn.w	r2, #8
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2204      	movs	r2, #4
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fd fd0b 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 800330a:	e005      	b.n	8003318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f98d 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f994 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d122      	bne.n	8003372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d11b      	bne.n	8003372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0210 	mvn.w	r2, #16
 8003342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2208      	movs	r2, #8
 8003348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd fce1 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 800335e:	e005      	b.n	800336c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f963 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f96a 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0201 	mvn.w	r2, #1
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f93d 	bl	8003618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d10e      	bne.n	80033ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fbb1 	bl	8003b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d10e      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e4:	2b80      	cmp	r3, #128	; 0x80
 80033e6:	d107      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fba4 	bl	8003b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b40      	cmp	r3, #64	; 0x40
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f918 	bl	8003654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b20      	cmp	r3, #32
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0220 	mvn.w	r2, #32
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fb64 	bl	8003b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003472:	2302      	movs	r3, #2
 8003474:	e088      	b.n	8003588 <HAL_TIM_IC_ConfigChannel+0x130>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f000 f988 	bl	80037a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 020c 	bic.w	r2, r2, #12
 80034a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	619a      	str	r2, [r3, #24]
 80034ba:	e060      	b.n	800357e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d11c      	bne.n	80034fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f000 f9dd 	bl	8003890 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6999      	ldr	r1, [r3, #24]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	619a      	str	r2, [r3, #24]
 80034fa:	e040      	b.n	800357e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f000 f9fa 	bl	800390a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020c 	bic.w	r2, r2, #12
 8003524:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69d9      	ldr	r1, [r3, #28]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	61da      	str	r2, [r3, #28]
 8003538:	e021      	b.n	800357e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d11c      	bne.n	800357a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fa17 	bl	8003982 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003562:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69d9      	ldr	r1, [r3, #28]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	61da      	str	r2, [r3, #28]
 8003578:	e001      	b.n	800357e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d831      	bhi.n	8003608 <HAL_TIM_ReadCapturedValue+0x78>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	08003609 	.word	0x08003609
 80035b4:	08003609 	.word	0x08003609
 80035b8:	08003609 	.word	0x08003609
 80035bc:	080035eb 	.word	0x080035eb
 80035c0:	08003609 	.word	0x08003609
 80035c4:	08003609 	.word	0x08003609
 80035c8:	08003609 	.word	0x08003609
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	08003609 	.word	0x08003609
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003609 	.word	0x08003609
 80035dc:	080035ff 	.word	0x080035ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	60fb      	str	r3, [r7, #12]

      break;
 80035e8:	e00f      	b.n	800360a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	60fb      	str	r3, [r7, #12]

      break;
 80035f2:	e00a      	b.n	800360a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	60fb      	str	r3, [r7, #12]

      break;
 80035fc:	e005      	b.n	800360a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	60fb      	str	r3, [r7, #12]

      break;
 8003606:	e000      	b.n	800360a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003608:	bf00      	nop
  }

  return tmpreg;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a40      	ldr	r2, [pc, #256]	; (800377c <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	; (8003780 <TIM_Base_SetConfig+0x118>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <TIM_Base_SetConfig+0x114>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d027      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <TIM_Base_SetConfig+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d023      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <TIM_Base_SetConfig+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <TIM_Base_SetConfig+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <TIM_Base_SetConfig+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <TIM_Base_SetConfig+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <TIM_Base_SetConfig+0x138>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIM_Base_SetConfig+0x13c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <TIM_Base_SetConfig+0x124>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40001800 	.word	0x40001800
 80037a0:	40001c00 	.word	0x40001c00
 80037a4:	40002000 	.word	0x40002000

080037a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a28      	ldr	r2, [pc, #160]	; (8003874 <TIM_TI1_SetConfig+0xcc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01b      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d017      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <TIM_TI1_SetConfig+0xd0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a24      	ldr	r2, [pc, #144]	; (800387c <TIM_TI1_SetConfig+0xd4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a23      	ldr	r2, [pc, #140]	; (8003880 <TIM_TI1_SetConfig+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <TIM_TI1_SetConfig+0xdc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <TIM_TI1_SetConfig+0xe0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_TI1_SetConfig+0x66>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <TIM_TI1_SetConfig+0xe4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <TIM_TI1_SetConfig+0x6a>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <TIM_TI1_SetConfig+0x6c>
 8003812:	2300      	movs	r3, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e003      	b.n	8003832 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	b2db      	uxtb	r3, r3
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f023 030a 	bic.w	r3, r3, #10
 800384c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 030a 	and.w	r3, r3, #10
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40010400 	.word	0x40010400
 8003888:	40014000 	.word	0x40014000
 800388c:	40001800 	.word	0x40001800

08003890 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0210 	bic.w	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	031b      	lsls	r3, r3, #12
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003946:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	b2db      	uxtb	r3, r3
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800395a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	031b      	lsls	r3, r3, #12
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	031b      	lsls	r3, r3, #12
 80039da:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e06d      	b.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d01d      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10c      	bne.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40001800 	.word	0x40001800

08003b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e040      	b.n	8003be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fc44 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f82c 	bl	8003bf0 <UART_SetConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa84 	bl	80040b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb0b 	bl	80041fc <UART_CheckIdleState>
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4ba6      	ldr	r3, [pc, #664]	; (8003eb4 <UART_SetConfig+0x2c4>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6979      	ldr	r1, [r7, #20]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a94      	ldr	r2, [pc, #592]	; (8003eb8 <UART_SetConfig+0x2c8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d120      	bne.n	8003cae <UART_SetConfig+0xbe>
 8003c6c:	4b93      	ldr	r3, [pc, #588]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d816      	bhi.n	8003ca8 <UART_SetConfig+0xb8>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x90>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003c9d 	.word	0x08003c9d
 8003c88:	08003c97 	.word	0x08003c97
 8003c8c:	08003ca3 	.word	0x08003ca3
 8003c90:	2301      	movs	r3, #1
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e150      	b.n	8003f38 <UART_SetConfig+0x348>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e14d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e14a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e147      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e144      	b.n	8003f38 <UART_SetConfig+0x348>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <UART_SetConfig+0x2d0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d132      	bne.n	8003d1e <UART_SetConfig+0x12e>
 8003cb8:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d828      	bhi.n	8003d18 <UART_SetConfig+0x128>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0xdc>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d19 	.word	0x08003d19
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003d19 	.word	0x08003d19
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d07 	.word	0x08003d07
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d19 	.word	0x08003d19
 8003cfc:	08003d13 	.word	0x08003d13
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e118      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d06:	2302      	movs	r3, #2
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e115      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e112      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d12:	2308      	movs	r3, #8
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e10f      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e10c      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a68      	ldr	r2, [pc, #416]	; (8003ec4 <UART_SetConfig+0x2d4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d120      	bne.n	8003d6a <UART_SetConfig+0x17a>
 8003d28:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d32:	2b30      	cmp	r3, #48	; 0x30
 8003d34:	d013      	beq.n	8003d5e <UART_SetConfig+0x16e>
 8003d36:	2b30      	cmp	r3, #48	; 0x30
 8003d38:	d814      	bhi.n	8003d64 <UART_SetConfig+0x174>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d009      	beq.n	8003d52 <UART_SetConfig+0x162>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d810      	bhi.n	8003d64 <UART_SetConfig+0x174>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x15c>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d006      	beq.n	8003d58 <UART_SetConfig+0x168>
 8003d4a:	e00b      	b.n	8003d64 <UART_SetConfig+0x174>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0f2      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0ef      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e0ec      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e0e9      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e0e6      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a56      	ldr	r2, [pc, #344]	; (8003ec8 <UART_SetConfig+0x2d8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d120      	bne.n	8003db6 <UART_SetConfig+0x1c6>
 8003d74:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d80:	d013      	beq.n	8003daa <UART_SetConfig+0x1ba>
 8003d82:	2bc0      	cmp	r3, #192	; 0xc0
 8003d84:	d814      	bhi.n	8003db0 <UART_SetConfig+0x1c0>
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d009      	beq.n	8003d9e <UART_SetConfig+0x1ae>
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d810      	bhi.n	8003db0 <UART_SetConfig+0x1c0>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <UART_SetConfig+0x1a8>
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d006      	beq.n	8003da4 <UART_SetConfig+0x1b4>
 8003d96:	e00b      	b.n	8003db0 <UART_SetConfig+0x1c0>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0cc      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e0c9      	b.n	8003f38 <UART_SetConfig+0x348>
 8003da4:	2304      	movs	r3, #4
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e0c6      	b.n	8003f38 <UART_SetConfig+0x348>
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e0c3      	b.n	8003f38 <UART_SetConfig+0x348>
 8003db0:	2310      	movs	r3, #16
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e0c0      	b.n	8003f38 <UART_SetConfig+0x348>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a44      	ldr	r2, [pc, #272]	; (8003ecc <UART_SetConfig+0x2dc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d125      	bne.n	8003e0c <UART_SetConfig+0x21c>
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dce:	d017      	beq.n	8003e00 <UART_SetConfig+0x210>
 8003dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd4:	d817      	bhi.n	8003e06 <UART_SetConfig+0x216>
 8003dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dda:	d00b      	beq.n	8003df4 <UART_SetConfig+0x204>
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de0:	d811      	bhi.n	8003e06 <UART_SetConfig+0x216>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <UART_SetConfig+0x1fe>
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d006      	beq.n	8003dfa <UART_SetConfig+0x20a>
 8003dec:	e00b      	b.n	8003e06 <UART_SetConfig+0x216>
 8003dee:	2300      	movs	r3, #0
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e0a1      	b.n	8003f38 <UART_SetConfig+0x348>
 8003df4:	2302      	movs	r3, #2
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e09e      	b.n	8003f38 <UART_SetConfig+0x348>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e09b      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e00:	2308      	movs	r3, #8
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e098      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e06:	2310      	movs	r3, #16
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e095      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <UART_SetConfig+0x2e0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d125      	bne.n	8003e62 <UART_SetConfig+0x272>
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e24:	d017      	beq.n	8003e56 <UART_SetConfig+0x266>
 8003e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2a:	d817      	bhi.n	8003e5c <UART_SetConfig+0x26c>
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	d00b      	beq.n	8003e4a <UART_SetConfig+0x25a>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d811      	bhi.n	8003e5c <UART_SetConfig+0x26c>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <UART_SetConfig+0x254>
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d006      	beq.n	8003e50 <UART_SetConfig+0x260>
 8003e42:	e00b      	b.n	8003e5c <UART_SetConfig+0x26c>
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e076      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e073      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e50:	2304      	movs	r3, #4
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e070      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e56:	2308      	movs	r3, #8
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e06d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e06a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <UART_SetConfig+0x2e4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d138      	bne.n	8003ede <UART_SetConfig+0x2ee>
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e7a:	d017      	beq.n	8003eac <UART_SetConfig+0x2bc>
 8003e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e80:	d82a      	bhi.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e86:	d00b      	beq.n	8003ea0 <UART_SetConfig+0x2b0>
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d824      	bhi.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <UART_SetConfig+0x2aa>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d006      	beq.n	8003ea6 <UART_SetConfig+0x2b6>
 8003e98:	e01e      	b.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e04b      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e048      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e045      	b.n	8003f38 <UART_SetConfig+0x348>
 8003eac:	2308      	movs	r3, #8
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e042      	b.n	8003f38 <UART_SetConfig+0x348>
 8003eb2:	bf00      	nop
 8003eb4:	efff69f3 	.word	0xefff69f3
 8003eb8:	40011000 	.word	0x40011000
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40004400 	.word	0x40004400
 8003ec4:	40004800 	.word	0x40004800
 8003ec8:	40004c00 	.word	0x40004c00
 8003ecc:	40005000 	.word	0x40005000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40007800 	.word	0x40007800
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e02c      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a72      	ldr	r2, [pc, #456]	; (80040ac <UART_SetConfig+0x4bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d125      	bne.n	8003f34 <UART_SetConfig+0x344>
 8003ee8:	4b71      	ldr	r3, [pc, #452]	; (80040b0 <UART_SetConfig+0x4c0>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ef2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ef6:	d017      	beq.n	8003f28 <UART_SetConfig+0x338>
 8003ef8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003efc:	d817      	bhi.n	8003f2e <UART_SetConfig+0x33e>
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f02:	d00b      	beq.n	8003f1c <UART_SetConfig+0x32c>
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d811      	bhi.n	8003f2e <UART_SetConfig+0x33e>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <UART_SetConfig+0x326>
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f12:	d006      	beq.n	8003f22 <UART_SetConfig+0x332>
 8003f14:	e00b      	b.n	8003f2e <UART_SetConfig+0x33e>
 8003f16:	2300      	movs	r3, #0
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e00d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e00a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f22:	2304      	movs	r3, #4
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e007      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f2e:	2310      	movs	r3, #16
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e001      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f34:	2310      	movs	r3, #16
 8003f36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f40:	d15b      	bne.n	8003ffa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d828      	bhi.n	8003f9a <UART_SetConfig+0x3aa>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x360>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f9b 	.word	0x08003f9b
 8003f68:	08003f9b 	.word	0x08003f9b
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	08003f93 	.word	0x08003f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7fe fce2 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8003f78:	61b8      	str	r0, [r7, #24]
        break;
 8003f7a:	e013      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7fe fcf2 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <UART_SetConfig+0x4c4>)
 8003f86:	61bb      	str	r3, [r7, #24]
        break;
 8003f88:	e00c      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe fbc5 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8003f8e:	61b8      	str	r0, [r7, #24]
        break;
 8003f90:	e008      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	61bb      	str	r3, [r7, #24]
        break;
 8003f98:	e004      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d074      	beq.n	8004094 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	005a      	lsls	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d916      	bls.n	8003ff4 <UART_SetConfig+0x404>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d212      	bcs.n	8003ff4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f023 030f 	bic.w	r3, r3, #15
 8003fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	89fa      	ldrh	r2, [r7, #14]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	e04f      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77bb      	strb	r3, [r7, #30]
 8003ff8:	e04c      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d828      	bhi.n	8004052 <UART_SetConfig+0x462>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x418>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004035 	.word	0x08004035
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004053 	.word	0x08004053
 8004018:	08004043 	.word	0x08004043
 800401c:	08004053 	.word	0x08004053
 8004020:	08004053 	.word	0x08004053
 8004024:	08004053 	.word	0x08004053
 8004028:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe fc86 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8004030:	61b8      	str	r0, [r7, #24]
        break;
 8004032:	e013      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fc96 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e00f      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <UART_SetConfig+0x4c4>)
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e00c      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe fb69 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004046:	61b8      	str	r0, [r7, #24]
        break;
 8004048:	e008      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	61bb      	str	r3, [r7, #24]
        break;
 8004050:	e004      	b.n	800405c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	77bb      	strb	r3, [r7, #30]
        break;
 800405a:	bf00      	nop
    }

    if (pclk != 0U)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085a      	lsrs	r2, r3, #1
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d909      	bls.n	8004090 <UART_SetConfig+0x4a0>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d205      	bcs.n	8004090 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	e001      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40007c00 	.word	0x40007c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	d10a      	bne.n	80041ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd fa94 	bl	8001738 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d10e      	bne.n	800423e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f81b 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e011      	b.n	8004262 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b09c      	sub	sp, #112	; 0x70
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427a:	e0a7      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	f000 80a3 	beq.w	80043cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fd fa57 	bl	8001738 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <UART_WaitOnFlagUntilTimeout+0x32>
 8004296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004298:	2b00      	cmp	r3, #0
 800429a:	d13f      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b0:	667b      	str	r3, [r7, #100]	; 0x64
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e6      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e068      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d050      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	d148      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004342:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
 8004364:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e6      	bne.n	8004344 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	613b      	str	r3, [r7, #16]
   return(result);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	66bb      	str	r3, [r7, #104]	; 0x68
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3308      	adds	r3, #8
 8004394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004396:	623a      	str	r2, [r7, #32]
 8004398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	69f9      	ldr	r1, [r7, #28]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e010      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f43f af48 	beq.w	800427c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3770      	adds	r7, #112	; 0x70
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f8:	b084      	sub	sp, #16
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	f107 001c 	add.w	r0, r7, #28
 8004406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d120      	bne.n	8004452 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <USB_CoreInit+0xac>)
 8004422:	4013      	ands	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa96 	bl	8004978 <USB_CoreReset>
 800444c:	4603      	mov	r3, r0
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	e010      	b.n	8004474 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa8a 	bl	8004978 <USB_CoreReset>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10b      	bne.n	8004492 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f043 0206 	orr.w	r2, r3, #6
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800449e:	b004      	add	sp, #16
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	ffbdffbf 	.word	0xffbdffbf

080044a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 0201 	bic.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d115      	bne.n	8004518 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fd f929 	bl	8001750 <HAL_Delay>
      ms++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa29 	bl	800495c <USB_GetMode>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d01e      	beq.n	800454e <USB_SetCurrentMode+0x84>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b31      	cmp	r3, #49	; 0x31
 8004514:	d9f0      	bls.n	80044f8 <USB_SetCurrentMode+0x2e>
 8004516:	e01a      	b.n	800454e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800452a:	2001      	movs	r0, #1
 800452c:	f7fd f910 	bl	8001750 <HAL_Delay>
      ms++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa10 	bl	800495c <USB_GetMode>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <USB_SetCurrentMode+0x84>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b31      	cmp	r3, #49	; 0x31
 8004546:	d9f0      	bls.n	800452a <USB_SetCurrentMode+0x60>
 8004548:	e001      	b.n	800454e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e005      	b.n	800455a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b32      	cmp	r3, #50	; 0x32
 8004552:	d101      	bne.n	8004558 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e009      	b.n	8004598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3340      	adds	r3, #64	; 0x40
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	2200      	movs	r2, #0
 8004590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	3301      	adds	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0e      	cmp	r3, #14
 800459c:	d9f2      	bls.n	8004584 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d11c      	bne.n	80045de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e005      	b.n	80045ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045f0:	461a      	mov	r2, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fc:	4619      	mov	r1, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	461a      	mov	r2, r3
 8004606:	680b      	ldr	r3, [r1, #0]
 8004608:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10c      	bne.n	800462a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004616:	2100      	movs	r1, #0
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f965 	bl	80048e8 <USB_SetDevSpeed>
 800461e:	e008      	b.n	8004632 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004620:	2101      	movs	r1, #1
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f960 	bl	80048e8 <USB_SetDevSpeed>
 8004628:	e003      	b.n	8004632 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800462a:	2103      	movs	r1, #3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f95b 	bl	80048e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004632:	2110      	movs	r1, #16
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8f3 	bl	8004820 <USB_FlushTxFifo>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f91f 	bl	8004888 <USB_FlushRxFifo>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	461a      	mov	r2, r3
 800465c:	2300      	movs	r3, #0
 800465e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e043      	b.n	8004706 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004694:	d118      	bne.n	80046c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e013      	b.n	80046da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046be:	461a      	mov	r2, r3
 80046c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e008      	b.n	80046da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	2300      	movs	r3, #0
 80046d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	461a      	mov	r2, r3
 80046fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3301      	adds	r3, #1
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3b7      	bcc.n	800467e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e043      	b.n	800479c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472a:	d118      	bne.n	800475e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e013      	b.n	8004770 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e008      	b.n	8004770 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	2300      	movs	r3, #0
 8004780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	461a      	mov	r2, r3
 8004790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3301      	adds	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3b7      	bcc.n	8004714 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f043 0210 	orr.w	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <USB_DevInit+0x2b4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f043 0208 	orr.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <USB_DevInit+0x2b8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004814:	b004      	add	sp, #16
 8004816:	4770      	bx	lr
 8004818:	803c3800 	.word	0x803c3800
 800481c:	40000004 	.word	0x40000004

08004820 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <USB_FlushTxFifo+0x64>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e01b      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	daf2      	bge.n	800482e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	019b      	lsls	r3, r3, #6
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <USB_FlushTxFifo+0x64>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e006      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d0f0      	beq.n	8004858 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	00030d40 	.word	0x00030d40

08004888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <USB_FlushRxFifo+0x5c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e018      	b.n	80048d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	daf2      	bge.n	8004894 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2210      	movs	r2, #16
 80048b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <USB_FlushRxFifo+0x5c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e006      	b.n	80048d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d0f0      	beq.n	80048b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	00030d40 	.word	0x00030d40

080048e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <USB_CoreReset+0x64>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e01b      	b.n	80049ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	daf2      	bge.n	8004984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <USB_CoreReset+0x64>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d0f0      	beq.n	80049ae <USB_CoreReset+0x36>

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	00030d40 	.word	0x00030d40

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4d0d      	ldr	r5, [pc, #52]	; (8004a18 <__libc_init_array+0x38>)
 80049e4:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e6:	1b64      	subs	r4, r4, r5
 80049e8:	10a4      	asrs	r4, r4, #2
 80049ea:	2600      	movs	r6, #0
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	4d0b      	ldr	r5, [pc, #44]	; (8004a20 <__libc_init_array+0x40>)
 80049f2:	4c0c      	ldr	r4, [pc, #48]	; (8004a24 <__libc_init_array+0x44>)
 80049f4:	f000 f820 	bl	8004a38 <_init>
 80049f8:	1b64      	subs	r4, r4, r5
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	2600      	movs	r6, #0
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	08004a70 	.word	0x08004a70
 8004a1c:	08004a70 	.word	0x08004a70
 8004a20:	08004a70 	.word	0x08004a70
 8004a24:	08004a74 	.word	0x08004a74

08004a28 <memset>:
 8004a28:	4402      	add	r2, r0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	f803 1b01 	strb.w	r1, [r3], #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
