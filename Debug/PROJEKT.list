
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  2000001c  08005ed4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08005ed4  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bc2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002411  00000000  00000000  00033c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00036020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00037050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cf4  00000000  00000000  00037fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014522  00000000  00000000  0005dc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8af  00000000  00000000  000721be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160a6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  00160ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005e78 	.word	0x08005e78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	08005e78 	.word	0x08005e78

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b974 	b.w	8000d84 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468e      	mov	lr, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14d      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	d969      	bls.n	8000b9c <__udivmoddi4+0xe8>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b152      	cbz	r2, 8000ae4 <__udivmoddi4+0x30>
 8000ace:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad2:	f1c2 0120 	rsb	r1, r2, #32
 8000ad6:	fa20 f101 	lsr.w	r1, r0, r1
 8000ada:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ade:	ea41 0e03 	orr.w	lr, r1, r3
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	fbbe f6f8 	udiv	r6, lr, r8
 8000aee:	fa1f f78c 	uxth.w	r7, ip
 8000af2:	fb08 e316 	mls	r3, r8, r6, lr
 8000af6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000afa:	fb06 f107 	mul.w	r1, r6, r7
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b0a:	f080 811f 	bcs.w	8000d4c <__udivmoddi4+0x298>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 811c 	bls.w	8000d4c <__udivmoddi4+0x298>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3310 	mls	r3, r8, r0, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb00 f707 	mul.w	r7, r0, r7
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x92>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 810a 	bcs.w	8000d50 <__udivmoddi4+0x29c>
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	f240 8107 	bls.w	8000d50 <__udivmoddi4+0x29c>
 8000b42:	4464      	add	r4, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	b11d      	cbz	r5, 8000b58 <__udivmoddi4+0xa4>
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	2300      	movs	r3, #0
 8000b54:	e9c5 4300 	strd	r4, r3, [r5]
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xc2>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	f000 80ef 	beq.w	8000d46 <__udivmoddi4+0x292>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f683 	clz	r6, r3
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d14a      	bne.n	8000c14 <__udivmoddi4+0x160>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd4>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80f9 	bhi.w	8000d7a <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469e      	mov	lr, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa4>
 8000b96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xec>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8092 	bne.w	8000cce <__udivmoddi4+0x21a>
 8000baa:	eba1 010c 	sub.w	r1, r1, ip
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	0c20      	lsrs	r0, r4, #16
 8000bba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000bc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc6:	fb0e f003 	mul.w	r0, lr, r3
 8000bca:	4288      	cmp	r0, r1
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x12c>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x12a>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2c0>
 8000bde:	4643      	mov	r3, r8
 8000be0:	1a09      	subs	r1, r1, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x156>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x154>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x9a>
 8000c14:	f1c6 0720 	rsb	r7, r6, #32
 8000c18:	40b3      	lsls	r3, r6
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa20 f407 	lsr.w	r4, r0, r7
 8000c26:	fa01 f306 	lsl.w	r3, r1, r6
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	40f9      	lsrs	r1, r7
 8000c2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c32:	fa00 f306 	lsl.w	r3, r0, r6
 8000c36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c3a:	0c20      	lsrs	r0, r4, #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fb09 1118 	mls	r1, r9, r8, r1
 8000c44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c48:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b8>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2bc>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2bc>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c74:	fb09 1110 	mls	r1, r9, r0, r1
 8000c78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	458e      	cmp	lr, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1e2>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2b4>
 8000c8e:	458e      	cmp	lr, r1
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2b4>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46a6      	mov	lr, r4
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x2a4>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x2a0>
 8000cac:	b15d      	cbz	r5, 8000cc6 <__udivmoddi4+0x212>
 8000cae:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cba:	fa22 f306 	lsr.w	r3, r2, r6
 8000cbe:	40f1      	lsrs	r1, r6
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cec:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf0:	0c0b      	lsrs	r3, r1, #16
 8000cf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x260>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b8>
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b8>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1b9b      	subs	r3, r3, r6
 8000d16:	b289      	uxth	r1, r1
 8000d18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb06 f30e 	mul.w	r3, r6, lr
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x28a>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d3a:	3e02      	subs	r6, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	1ac9      	subs	r1, r1, r3
 8000d40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0x104>
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e705      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e3      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6f8      	b.n	8000b46 <__udivmoddi4+0x92>
 8000d54:	454b      	cmp	r3, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f8>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f8>
 8000d64:	4646      	mov	r6, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x28a>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1e2>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b8>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x12c>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e709      	b.n	8000b92 <__udivmoddi4+0xde>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x156>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <delay+0x30>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000d9a:	bf00      	nop
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <delay+0x30>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3f9      	bcc.n	8000d9c <delay+0x14>
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000038 	.word	0x20000038
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <HAL_TIM_IC_CaptureCallback>:
uint16_t PWM = 0;

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f1b      	ldrb	r3, [r3, #28]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	f040 8083 	bne.w	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dd2:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d11a      	bne.n	8000e10 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000dda:	2100      	movs	r1, #0
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f003 fad9 	bl	8004394 <HAL_TIM_ReadCapturedValue>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a41      	ldr	r2, [pc, #260]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000de6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 020a 	bic.w	r2, r2, #10
 8000dfc:	621a      	str	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 0202 	orr.w	r2, r2, #2
 8000e0c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000e0e:	e063      	b.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d15f      	bne.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f003 faba 	bl	8004394 <HAL_TIM_ReadCapturedValue>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e24:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d907      	bls.n	8000e4a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	e00f      	b.n	8000e6a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d909      	bls.n	8000e6a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e64:	4413      	add	r3, r2
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e68:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb0c 	bl	800048c <__aeabi_ui2d>
 8000e74:	a31a      	add	r3, pc, #104	; (adr r3, 8000ee0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fb81 	bl	8000580 <__aeabi_dmul>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	f7ff fca1 	bl	80007d4 <__aeabi_ddiv>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fd83 	bl	80009a4 <__aeabi_d2uiz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020a 	bic.w	r2, r2, #10
 8000eba:	621a      	str	r2, [r3, #32]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a12      	ldr	r2, [r2, #32]
 8000ec6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0202 	bic.w	r2, r2, #2
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	b020c49c 	.word	0xb020c49c
 8000ee4:	3fa16872 	.word	0x3fa16872
 8000ee8:	2000066c 	.word	0x2000066c
 8000eec:	20000660 	.word	0x20000660
 8000ef0:	20000664 	.word	0x20000664
 8000ef4:	20000668 	.word	0x20000668
 8000ef8:	2000066d 	.word	0x2000066d
 8000efc:	20000038 	.word	0x20000038

08000f00 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HCSR04_Read+0x38>)
 8000f0c:	f001 f922 	bl	8002154 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f10:	200a      	movs	r0, #10
 8000f12:	f7ff ff39 	bl	8000d88 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HCSR04_Read+0x38>)
 8000f1e:	f001 f919 	bl	8002154 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HCSR04_Read+0x3c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HCSR04_Read+0x3c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0202 	orr.w	r2, r2, #2
 8000f30:	60da      	str	r2, [r3, #12]
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	20000038 	.word	0x20000038

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fdc6 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f911 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 faa7 	bl	80014a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f52:	f000 fa47 	bl	80013e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f56:	f000 fa75 	bl	8001444 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000f5a:	f000 f971 	bl	8001240 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f5e:	f000 f9c9 	bl	80012f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4870      	ldr	r0, [pc, #448]	; (8001128 <main+0x1e8>)
 8000f66:	f002 fd2b 	bl	80039c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	486f      	ldr	r0, [pc, #444]	; (800112c <main+0x1ec>)
 8000f6e:	f002 fbd5 	bl	800371c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000f72:	f7ff ffc5 	bl	8000f00 <HCSR04_Read>
	  y = Distance;
 8000f76:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <main+0x1f0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f82:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <main+0x1f4>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
	  e[0] = yr - y;
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <main+0x1f8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	4b67      	ldr	r3, [pc, #412]	; (8001134 <main+0x1f4>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <main+0x1fc>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
	  ui = (2*ui+Ki*0.01*(e[0]+e[1]))/2;
 8000fa4:	4b66      	ldr	r3, [pc, #408]	; (8001140 <main+0x200>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fae:	ee17 0a90 	vmov	r0, s15
 8000fb2:	f7ff fa8d 	bl	80004d0 <__aeabi_f2d>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	4b62      	ldr	r3, [pc, #392]	; (8001144 <main+0x204>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa86 	bl	80004d0 <__aeabi_f2d>
 8000fc4:	a356      	add	r3, pc, #344	; (adr r3, 8001120 <main+0x1e0>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fad9 	bl	8000580 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4690      	mov	r8, r2
 8000fd4:	4699      	mov	r9, r3
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <main+0x1fc>)
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <main+0x1fc>)
 8000fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	ee17 0a90 	vmov	r0, s15
 8000fea:	f7ff fa71 	bl	80004d0 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff fac3 	bl	8000580 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4620      	mov	r0, r4
 8001000:	4629      	mov	r1, r5
 8001002:	f7ff f907 	bl	8000214 <__adddf3>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	f7ff fbdd 	bl	80007d4 <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fcdf 	bl	80009e4 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <main+0x200>)
 800102a:	6013      	str	r3, [r2, #0]
	  u = Kp*e[0] + Td*(e[0]-e[1])/0.01;
 800102c:	4b43      	ldr	r3, [pc, #268]	; (800113c <main+0x1fc>)
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <main+0x208>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa46 	bl	80004d0 <__aeabi_f2d>
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
 8001048:	4b3c      	ldr	r3, [pc, #240]	; (800113c <main+0x1fc>)
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <main+0x1fc>)
 8001050:	edd3 7a01 	vldr	s15, [r3, #4]
 8001054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001058:	4b3c      	ldr	r3, [pc, #240]	; (800114c <main+0x20c>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	ee17 0a90 	vmov	r0, s15
 8001066:	f7ff fa33 	bl	80004d0 <__aeabi_f2d>
 800106a:	a32d      	add	r3, pc, #180	; (adr r3, 8001120 <main+0x1e0>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fbb0 	bl	80007d4 <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8ca 	bl	8000214 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fcac 	bl	80009e4 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	4a30      	ldr	r2, [pc, #192]	; (8001150 <main+0x210>)
 8001090:	6013      	str	r3, [r2, #0]
	  e[1] = e[0];
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <main+0x1fc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <main+0x1fc>)
 8001098:	6053      	str	r3, [r2, #4]
	  u += 90;
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <main+0x210>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001154 <main+0x214>
 80010a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <main+0x210>)
 80010aa:	edc3 7a00 	vstr	s15, [r3]
	  if ( u > 135) {
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <main+0x210>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001158 <main+0x218>
 80010b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	dd03      	ble.n	80010ca <main+0x18a>
		  u = 135;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <main+0x210>)
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <main+0x21c>)
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e00c      	b.n	80010e4 <main+0x1a4>
	  } else if(u < 45) {
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <main+0x210>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001160 <main+0x220>
 80010d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d502      	bpl.n	80010e4 <main+0x1a4>
		  u = 45;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <main+0x210>)
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <main+0x224>)
 80010e2:	601a      	str	r2, [r3, #0]
	  }
	  PWM = -9*u+2500;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <main+0x210>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001168 <main+0x228>
 80010f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <main+0x22c>)
 8001106:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PWM);
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <main+0x22c>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <main+0x1ec>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(10);
 8001112:	200a      	movs	r0, #10
 8001114:	f000 fd3c 	bl	8001b90 <HAL_Delay>
	  HCSR04_Read();
 8001118:	e72b      	b.n	8000f72 <main+0x32>
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	47ae147b 	.word	0x47ae147b
 8001124:	3f847ae1 	.word	0x3f847ae1
 8001128:	20000038 	.word	0x20000038
 800112c:	20000084 	.word	0x20000084
 8001130:	2000066d 	.word	0x2000066d
 8001134:	20000670 	.word	0x20000670
 8001138:	20000000 	.word	0x20000000
 800113c:	2000067c 	.word	0x2000067c
 8001140:	20000678 	.word	0x20000678
 8001144:	20000004 	.word	0x20000004
 8001148:	20000008 	.word	0x20000008
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000674 	.word	0x20000674
 8001154:	42b40000 	.word	0x42b40000
 8001158:	43070000 	.word	0x43070000
 800115c:	43070000 	.word	0x43070000
 8001160:	42340000 	.word	0x42340000
 8001164:	42340000 	.word	0x42340000
 8001168:	451c4000 	.word	0x451c4000
 800116c:	20000684 	.word	0x20000684

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	; 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fe72 	bl	8005e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001194:	f001 f940 	bl	8002418 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <SystemClock_Config+0xc8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <SystemClock_Config+0xc8>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <SystemClock_Config+0xc8>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <SystemClock_Config+0xcc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <SystemClock_Config+0xcc>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <SystemClock_Config+0xcc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011e4:	2348      	movs	r3, #72	; 0x48
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ec:	2303      	movs	r3, #3
 80011ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 f91f 	bl	8002438 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001200:	f000 fa56 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2102      	movs	r1, #2
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fbad 	bl	8002980 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800122c:	f000 fa40 	bl	80016b0 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3750      	adds	r7, #80	; 0x50
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_TIM1_Init+0xac>)
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <MX_TIM1_Init+0xb0>)
 8001262:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_TIM1_Init+0xac>)
 8001266:	2247      	movs	r2, #71	; 0x47
 8001268:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_TIM1_Init+0xac>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_TIM1_Init+0xac>)
 8001272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001276:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_TIM1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_TIM1_Init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_TIM1_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <MX_TIM1_Init+0xac>)
 800128c:	f002 fb40 	bl	8003910 <HAL_TIM_IC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001296:	f000 fa0b 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <MX_TIM1_Init+0xac>)
 80012ae:	f003 fdc5 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012b8:	f000 f9fa 	bl	80016b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_TIM1_Init+0xac>)
 80012d4:	f002 fde3 	bl	8003e9e <HAL_TIM_IC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80012de:	f000 f9e7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000038 	.word	0x20000038
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <MX_TIM2_Init+0xec>)
 8001328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <MX_TIM2_Init+0xec>)
 8001330:	2247      	movs	r2, #71	; 0x47
 8001332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_TIM2_Init+0xec>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MX_TIM2_Init+0xec>)
 800133c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_TIM2_Init+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_TIM2_Init+0xec>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_TIM2_Init+0xec>)
 8001350:	f002 f92c 	bl	80035ac <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800135a:	f000 f9a9 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MX_TIM2_Init+0xec>)
 800136c:	f002 ff48 	bl	8004200 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001376:	f000 f99b 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <MX_TIM2_Init+0xec>)
 800137c:	f002 f96d 	bl	800365a <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001386:	f000 f993 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_TIM2_Init+0xec>)
 800139a:	f003 fd4f 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013a4:	f000 f984 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80013ac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM2_Init+0xec>)
 80013c2:	f002 fe09 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80013cc:	f000 f970 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM2_Init+0xec>)
 80013d2:	f000 fa01 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	; 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000084 	.word	0x20000084

080013e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_USART3_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART3_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART3_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001428:	f003 fdb4 	bl	8004f94 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 f93d 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000d0 	.word	0x200000d0
 8001440:	40004800 	.word	0x40004800

08001444 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800144e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	2206      	movs	r2, #6
 8001454:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001458:	2202      	movs	r2, #2
 800145a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001464:	2202      	movs	r2, #2
 8001466:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146a:	2201      	movs	r2, #1
 800146c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147c:	2201      	movs	r2, #1
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001488:	f000 fe7d 	bl	8002186 <HAL_PCD_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f90d 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000158 	.word	0x20000158

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b78      	ldr	r3, [pc, #480]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a77      	ldr	r2, [pc, #476]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b75      	ldr	r3, [pc, #468]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	4b72      	ldr	r3, [pc, #456]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a71      	ldr	r2, [pc, #452]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a6b      	ldr	r2, [pc, #428]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b69      	ldr	r3, [pc, #420]	; (8001698 <MX_GPIO_Init+0x1f8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b66      	ldr	r3, [pc, #408]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <MX_GPIO_Init+0x1f8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <MX_GPIO_Init+0x1f8>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a59      	ldr	r2, [pc, #356]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b57      	ldr	r3, [pc, #348]	; (8001698 <MX_GPIO_Init+0x1f8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001546:	4b54      	ldr	r3, [pc, #336]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a53      	ldr	r2, [pc, #332]	; (8001698 <MX_GPIO_Init+0x1f8>)
 800154c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <MX_GPIO_Init+0x1f8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f244 0181 	movw	r1, #16513	; 0x4081
 8001564:	484d      	ldr	r0, [pc, #308]	; (800169c <MX_GPIO_Init+0x1fc>)
 8001566:	f000 fdf5 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_GPIO_Init+0x200>)
 8001572:	f000 fdef 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	484a      	ldr	r0, [pc, #296]	; (80016a4 <MX_GPIO_Init+0x204>)
 800157c:	f000 fdea 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4844      	ldr	r0, [pc, #272]	; (80016a8 <MX_GPIO_Init+0x208>)
 8001598:	f000 fc30 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800159c:	2332      	movs	r3, #50	; 0x32
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ac:	230b      	movs	r3, #11
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	483c      	ldr	r0, [pc, #240]	; (80016a8 <MX_GPIO_Init+0x208>)
 80015b8:	f000 fc20 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015bc:	2386      	movs	r3, #134	; 0x86
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015cc:	230b      	movs	r3, #11
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4835      	ldr	r0, [pc, #212]	; (80016ac <MX_GPIO_Init+0x20c>)
 80015d8:	f000 fc10 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4829      	ldr	r0, [pc, #164]	; (800169c <MX_GPIO_Init+0x1fc>)
 80015f6:	f000 fc01 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <MX_GPIO_Init+0x200>)
 8001614:	f000 fbf2 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800162a:	230b      	movs	r3, #11
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4819      	ldr	r0, [pc, #100]	; (800169c <MX_GPIO_Init+0x1fc>)
 8001636:	f000 fbe1 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800163a:	2340      	movs	r3, #64	; 0x40
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_GPIO_Init+0x204>)
 8001652:	f000 fbd3 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_GPIO_Init+0x204>)
 800166a:	f000 fbc7 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800166e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001680:	230b      	movs	r3, #11
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_GPIO_Init+0x204>)
 800168c:	f000 fbb6 	bl	8001dfc <HAL_GPIO_Init>

}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020000 	.word	0x40020000

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>
	...

080016bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x44>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x44>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x44>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x44>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x44>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x44>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_TIM_IC_MspInit+0x8c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d130      	bne.n	8001788 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_TIM_IC_MspInit+0x90>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001768:	2301      	movs	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <HAL_TIM_IC_MspInit+0x94>)
 8001774:	f000 fb42 	bl	8001dfc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	201b      	movs	r0, #27
 800177e:	f000 fb06 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001782:	201b      	movs	r0, #27
 8001784:	f000 fb1f 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d11b      	bne.n	8001832 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_TIM_MspPostInit+0x64>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_TIM_MspPostInit+0x64>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_TIM_MspPostInit+0x64>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001822:	2301      	movs	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <HAL_TIM_MspPostInit+0x68>)
 800182e:	f000 fae5 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0aa      	sub	sp, #168	; 0xa8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2284      	movs	r2, #132	; 0x84
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f004 faff 	bl	8005e68 <memset>
  if(huart->Instance==USART3)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_UART_MspInit+0xb4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d13c      	bne.n	80018ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001878:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800187a:	2300      	movs	r3, #0
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f001 faa2 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800188e:	f7ff ff0f 	bl	80016b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_UART_MspInit+0xb8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_UART_MspInit+0xb8>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0xbc>)
 80018ea:	f000 fa87 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	37a8      	adds	r7, #168	; 0xa8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004800 	.word	0x40004800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00

08001904 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0ac      	sub	sp, #176	; 0xb0
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	2284      	movs	r2, #132	; 0x84
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fa9f 	bl	8005e68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001932:	d159      	bne.n	80019e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001934:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001938:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fa41 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001950:	f7ff feae 	bl	80016b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800196c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001986:	230a      	movs	r3, #10
 8001988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001990:	4619      	mov	r1, r3
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <HAL_PCD_MspInit+0xf0>)
 8001994:	f000 fa32 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <HAL_PCD_MspInit+0xf0>)
 80019b4:	f000 fa22 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c2:	6353      	str	r3, [r2, #52]	; 0x34
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019da:	6453      	str	r3, [r2, #68]	; 0x44
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_PCD_MspInit+0xec>)
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	37b0      	adds	r7, #176	; 0xb0
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f884 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <TIM1_CC_IRQHandler+0x10>)
 8001a52:	f002 f905 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000038 	.word	0x20000038

08001a60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffd7 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f004 f9b5 	bl	8005e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fa43 	bl	8000f40 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001ac8:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8001acc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001ad0:	2000068c 	.word	0x2000068c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>

08001ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f000 f94c 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 f805 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fde9 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f967 	bl	8001de2 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f92f 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000018 	.word	0x20000018
 8001b4c:	20000014 	.word	0x20000014

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000018 	.word	0x20000018
 8001b74:	20000688 	.word	0x20000688

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000688 	.word	0x20000688

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000018 	.word	0x20000018

08001bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <__NVIC_SetPriorityGrouping+0x40>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x40>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	05fa0000 	.word	0x05fa0000

08001c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <__NVIC_GetPriorityGrouping+0x18>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 0307 	and.w	r3, r3, #7
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	db0b      	blt.n	8001c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4907      	ldr	r1, [pc, #28]	; (8001c74 <__NVIC_EnableIRQ+0x38>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff29 	bl	8001bd8 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff3e 	bl	8001c20 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff31 	bl	8001c3c <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa2 	bl	8001d34 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e175      	b.n	8002108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8164 	bne.w	8002102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x56>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80be 	beq.w	8002102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_GPIO_Init+0x328>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d037      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a54      	ldr	r2, [pc, #336]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_GPIO_Init+0x340>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x22a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x344>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x348>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x34c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x350>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x21a>
 8002012:	2309      	movs	r3, #9
 8002014:	e012      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002016:	230a      	movs	r3, #10
 8002018:	e010      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201a:	2308      	movs	r3, #8
 800201c:	e00e      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201e:	2307      	movs	r3, #7
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002022:	2306      	movs	r3, #6
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x240>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <HAL_GPIO_Init+0x328>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_GPIO_Init+0x354>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f ae86 	bls.w	8001e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40022000 	.word	0x40022000
 800214c:	40022400 	.word	0x40022400
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002188:	b08f      	sub	sp, #60	; 0x3c
 800218a:	af0a      	add	r7, sp, #40	; 0x28
 800218c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e116      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fba6 	bl	8001904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fb86 	bl	80058e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	687e      	ldr	r6, [r7, #4]
 80021e4:	466d      	mov	r5, sp
 80021e6:	f106 0410 	add.w	r4, r6, #16
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fa:	1d33      	adds	r3, r6, #4
 80021fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f003 fb1a 	bl	8005838 <USB_CoreInit>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0d7      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fb74 	bl	800590a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e04a      	b.n	80022be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	333d      	adds	r3, #61	; 0x3d
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	b298      	uxth	r0, r3
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3344      	adds	r3, #68	; 0x44
 8002264:	4602      	mov	r2, r0
 8002266:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3340      	adds	r3, #64	; 0x40
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334c      	adds	r3, #76	; 0x4c
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3354      	adds	r3, #84	; 0x54
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3301      	adds	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3af      	bcc.n	8002228 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e044      	b.n	8002358 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	3301      	adds	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3b5      	bcc.n	80022ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	687e      	ldr	r6, [r7, #4]
 800236a:	466d      	mov	r5, sp
 800236c:	f106 0410 	add.w	r4, r6, #16
 8002370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002380:	1d33      	adds	r3, r6, #4
 8002382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f003 fb0d 	bl	80059a4 <USB_DevInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e014      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d102      	bne.n	80023ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f80b 	bl	80023d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fccb 	bl	8005d5a <USB_DevDisconnect>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_PCDEx_ActivateLPM+0x44>)
 8002400:	4313      	orrs	r3, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	10000003 	.word	0x10000003

08002418 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e291      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8087 	beq.w	800256a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b96      	ldr	r3, [pc, #600]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00c      	beq.n	8002482 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002468:	4b93      	ldr	r3, [pc, #588]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d112      	bne.n	800249a <HAL_RCC_OscConfig+0x62>
 8002474:	4b90      	ldr	r3, [pc, #576]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d06c      	beq.n	8002568 <HAL_RCC_OscConfig+0x130>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d168      	bne.n	8002568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e26b      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7a>
 80024a4:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a83      	ldr	r2, [pc, #524]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e02e      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x9c>
 80024ba:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b7c      	ldr	r3, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a72      	ldr	r2, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024f8:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff fb2e 	bl	8001b78 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fb2a 	bl	8001b78 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e21f      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff fb1a 	bl	8001b78 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff fb16 	bl	8001b78 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e20b      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x110>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d069      	beq.n	800264a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b4d      	ldr	r3, [pc, #308]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x190>
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1df      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	493d      	ldr	r1, [pc, #244]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e040      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7ff facc 	bl	8001b78 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7ff fac8 	bl	8001b78 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1bd      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4929      	ldr	r1, [pc, #164]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
 8002616:	e018      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff faa8 	bl	8001b78 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff faa4 	bl	8001b78 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e199      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d038      	beq.n	80026c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7ff fa85 	bl	8001b78 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002672:	f7ff fa81 	bl	8001b78 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e176      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x23a>
 8002690:	e01a      	b.n	80026c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7ff fa6b 	bl	8001b78 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7ff fa67 	bl	8001b78 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d903      	bls.n	80026bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e15c      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
 80026b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b91      	ldr	r3, [pc, #580]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a4 	beq.w	800281e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a87      	ldr	r2, [pc, #540]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff fa2f 	bl	8001b78 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff fa2b 	bl	8001b78 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e120      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	4b75      	ldr	r3, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x31a>
 8002744:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x33c>
 800275a:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x35e>
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a60      	ldr	r2, [pc, #384]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b58      	ldr	r3, [pc, #352]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7ff f9df 	bl	8001b78 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff f9db 	bl	8001b78 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0ce      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x386>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff f9c9 	bl	8001b78 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff f9c5 	bl	8001b78 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b40      	ldr	r3, [pc, #256]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a4 	beq.w	8002970 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d06b      	beq.n	800290c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d149      	bne.n	80028d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a30      	ldr	r2, [pc, #192]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7ff f996 	bl	8001b78 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff f992 	bl	8001b78 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e087      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4313      	orrs	r3, r2
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800289a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f966 	bl	8001b78 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f962 	bl	8001b78 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e057      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x478>
 80028ce:	e04f      	b.n	8002970 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff f94c 	bl	8001b78 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff f948 	bl	8001b78 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e03d      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4ac>
 8002902:	e035      	b.n	8002970 <HAL_RCC_OscConfig+0x538>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x544>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d121      	bne.n	800296c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002942:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 020f 	bic.w	r2, r3, #15
 80029ae:	4965      	ldr	r1, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 80029e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e073      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4936      	ldr	r1, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7ff f880 	bl	8001b78 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7ff f87c 	bl	8001b78 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e053      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 020f 	bic.w	r2, r3, #15
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1cc>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1d0>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1d4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ffdc 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08005e90 	.word	0x08005e90
 8002b50:	20000010 	.word	0x20000010
 8002b54:	20000014 	.word	0x20000014

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b094      	sub	sp, #80	; 0x50
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	647b      	str	r3, [r7, #68]	; 0x44
 8002b64:	2300      	movs	r3, #0
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b68:	2300      	movs	r3, #0
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b70:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	f200 80e1 	bhi.w	8002d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8a:	e0db      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b90:	e0db      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b96:	e0d8      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bdc:	0150      	lsls	r0, r2, #5
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4621      	mov	r1, r4
 8002be4:	1a51      	subs	r1, r2, r1
 8002be6:	6139      	str	r1, [r7, #16]
 8002be8:	4629      	mov	r1, r5
 8002bea:	eb63 0301 	sbc.w	r3, r3, r1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	018b      	lsls	r3, r1, #6
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c06:	4651      	mov	r1, sl
 8002c08:	018a      	lsls	r2, r1, #6
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c10:	4659      	mov	r1, fp
 8002c12:	eb63 0901 	sbc.w	r9, r3, r1
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2a:	4690      	mov	r8, r2
 8002c2c:	4699      	mov	r9, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	eb18 0303 	adds.w	r3, r8, r3
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	462b      	mov	r3, r5
 8002c38:	eb49 0303 	adc.w	r3, r9, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	024b      	lsls	r3, r1, #9
 8002c4e:	4621      	mov	r1, r4
 8002c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c54:	4621      	mov	r1, r4
 8002c56:	024a      	lsls	r2, r1, #9
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c68:	f7fd ff0c 	bl	8000a84 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c74:	e058      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4611      	mov	r1, r2
 8002c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0159      	lsls	r1, r3, #5
 8002c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca2:	0150      	lsls	r0, r2, #5
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4641      	mov	r1, r8
 8002caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cae:	4649      	mov	r1, r9
 8002cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	00eb      	lsls	r3, r5, #3
 8002cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cde:	00e2      	lsls	r2, r4, #3
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	18e3      	adds	r3, r4, r3
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	464b      	mov	r3, r9
 8002cec:	eb45 0303 	adc.w	r3, r5, r3
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	028b      	lsls	r3, r1, #10
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d08:	4621      	mov	r1, r4
 8002d0a:	028a      	lsls	r2, r1, #10
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	61fa      	str	r2, [r7, #28]
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	f7fd feb2 	bl	8000a84 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3750      	adds	r7, #80	; 0x50
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000010 	.word	0x20000010

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08005ea0 	.word	0x08005ea0

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffdc 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08005ea0 	.word	0x08005ea0

08002dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d012      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	4964      	ldr	r1, [pc, #400]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d017      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e26:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	4959      	ldr	r1, [pc, #356]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d017      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e62:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	494a      	ldr	r1, [pc, #296]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 808b 	beq.w	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	4a39      	ldr	r2, [pc, #228]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebc:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fe50 	bl	8001b78 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7fe fe4c 	bl	8001b78 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e357      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d035      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d02e      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d114      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe14 	bl	8001b78 <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe fe10 	bl	8001b78 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e319      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f82:	d111      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f92:	400b      	ands	r3, r1
 8002f94:	4901      	ldr	r1, [pc, #4]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	0ffffcff 	.word	0x0ffffcff
 8002fa8:	4baa      	ldr	r3, [pc, #680]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4aa9      	ldr	r2, [pc, #676]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fb2:	6093      	str	r3, [r2, #8]
 8002fb4:	4ba7      	ldr	r3, [pc, #668]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	49a4      	ldr	r1, [pc, #656]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fd2:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	4a9e      	ldr	r2, [pc, #632]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fe2:	4b9c      	ldr	r3, [pc, #624]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	4999      	ldr	r1, [pc, #612]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003000:	4b94      	ldr	r3, [pc, #592]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300e:	4991      	ldr	r1, [pc, #580]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003022:	4b8c      	ldr	r3, [pc, #560]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	4988      	ldr	r1, [pc, #544]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003044:	4b83      	ldr	r3, [pc, #524]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	4980      	ldr	r1, [pc, #512]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003066:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4977      	ldr	r1, [pc, #476]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003088:	4b72      	ldr	r3, [pc, #456]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	496f      	ldr	r1, [pc, #444]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030aa:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f023 020c 	bic.w	r2, r3, #12
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	4966      	ldr	r1, [pc, #408]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030cc:	4b61      	ldr	r3, [pc, #388]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	495e      	ldr	r1, [pc, #376]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ee:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fc:	4955      	ldr	r1, [pc, #340]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	494d      	ldr	r1, [pc, #308]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003132:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4944      	ldr	r1, [pc, #272]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	493c      	ldr	r1, [pc, #240]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	4933      	ldr	r1, [pc, #204]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003198:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a6:	492b      	ldr	r1, [pc, #172]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d011      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	4922      	ldr	r1, [pc, #136]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322c:	4909      	ldr	r1, [pc, #36]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d006      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80d9 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a01      	ldr	r2, [pc, #4]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003254:	40023800 	.word	0x40023800
 8003258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325a:	f7fe fc8d 	bl	8001b78 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003262:	f7fe fc89 	bl	8001b78 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	; 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e194      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003274:	4b6c      	ldr	r3, [pc, #432]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d021      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d11d      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003294:	4b64      	ldr	r3, [pc, #400]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	019a      	lsls	r2, r3, #6
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	071b      	lsls	r3, r3, #28
 80032c8:	4957      	ldr	r1, [pc, #348]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fa:	d129      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032fc:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003310:	0f1b      	lsrs	r3, r3, #28
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	019a      	lsls	r2, r3, #6
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	431a      	orrs	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	071b      	lsls	r3, r3, #28
 8003330:	493d      	ldr	r1, [pc, #244]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333e:	f023 021f 	bic.w	r2, r3, #31
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	3b01      	subs	r3, #1
 8003348:	4937      	ldr	r1, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003362:	0e1b      	lsrs	r3, r3, #24
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800336a:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003370:	0f1b      	lsrs	r3, r3, #28
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	019a      	lsls	r2, r3, #6
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	071b      	lsls	r3, r3, #28
 8003390:	4925      	ldr	r1, [pc, #148]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	019a      	lsls	r2, r3, #6
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	071b      	lsls	r3, r3, #28
 80033c0:	4919      	ldr	r1, [pc, #100]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c8:	4b17      	ldr	r3, [pc, #92]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d4:	f7fe fbd0 	bl	8001b78 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033dc:	f7fe fbcc 	bl	8001b78 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0d7      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 80cd 	bne.w	800359c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340e:	f7fe fbb3 	bl	8001b78 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003416:	f7fe fbaf 	bl	8001b78 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d903      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0ba      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003438:	d0ed      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d12a      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003462:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003470:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	0f1b      	lsrs	r3, r3, #28
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	019a      	lsls	r2, r3, #6
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	4944      	ldr	r1, [pc, #272]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	493d      	ldr	r1, [pc, #244]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034cc:	d11d      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	0e1b      	lsrs	r3, r3, #24
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	0f1b      	lsrs	r3, r3, #28
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	019a      	lsls	r2, r3, #6
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	071b      	lsls	r3, r3, #28
 8003502:	4929      	ldr	r1, [pc, #164]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0e1b      	lsrs	r3, r3, #24
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4917      	ldr	r1, [pc, #92]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4911      	ldr	r1, [pc, #68]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fe fb00 	bl	8001b78 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800357c:	f7fe fafc 	bl	8001b78 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e007      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359a:	d1ef      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e049      	b.n	8003652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe f8e2 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 ff3e 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e049      	b.n	8003700 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f841 	bl	8003708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 fee7 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_TIM_PWM_Start+0x24>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e03c      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b04      	cmp	r3, #4
 8003744:	d109      	bne.n	800375a <HAL_TIM_PWM_Start+0x3e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e02f      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d109      	bne.n	8003774 <HAL_TIM_PWM_Start+0x58>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e022      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d109      	bne.n	800378e <HAL_TIM_PWM_Start+0x72>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e015      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x8c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e008      	b.n	80037ba <HAL_TIM_PWM_Start+0x9e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e092      	b.n	80038e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Start+0xb6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Start+0xc6>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	e01b      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0xd6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0xe6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003800:	e00b      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0xf6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	e003      	b.n	800381a <HAL_TIM_PWM_Start+0xfe>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fae4 	bl	8004df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <HAL_TIM_PWM_Start+0x1d4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_PWM_Start+0x120>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <HAL_TIM_PWM_Start+0x1d8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_TIM_PWM_Start+0x124>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_TIM_PWM_Start+0x126>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <HAL_TIM_PWM_Start+0x1d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003868:	d01d      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_TIM_PWM_Start+0x1dc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <HAL_TIM_PWM_Start+0x1e0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_TIM_PWM_Start+0x1e4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_TIM_PWM_Start+0x1d8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <HAL_TIM_PWM_Start+0x1e8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x18a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_TIM_PWM_Start+0x1ec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d115      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_TIM_PWM_Start+0x1f0>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d015      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x1c8>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038be:	d011      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	e008      	b.n	80038e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e000      	b.n	80038e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40014000 	.word	0x40014000
 8003908:	40001800 	.word	0x40001800
 800390c:	00010007 	.word	0x00010007

08003910 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e049      	b.n	80039b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fee4 	bl	8001704 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f000 fd8c 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <HAL_TIM_IC_Start_IT+0x1e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e023      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x66>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_IC_Start_IT+0x2e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	e01b      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x66>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_IC_Start_IT+0x3e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e013      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x66>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_IC_Start_IT+0x4e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e00b      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x66>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_IC_Start_IT+0x5e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e003      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x66>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_TIM_IC_Start_IT+0x78>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e013      	b.n	8003a60 <HAL_TIM_IC_Start_IT+0xa0>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d104      	bne.n	8003a48 <HAL_TIM_IC_Start_IT+0x88>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e00b      	b.n	8003a60 <HAL_TIM_IC_Start_IT+0xa0>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d104      	bne.n	8003a58 <HAL_TIM_IC_Start_IT+0x98>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e003      	b.n	8003a60 <HAL_TIM_IC_Start_IT+0xa0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a68:	7b7b      	ldrb	r3, [r7, #13]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0e2      	b.n	8003c38 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_IC_Start_IT+0xc2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a80:	e023      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x10a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_IC_Start_IT+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	e01b      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x10a>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_IC_Start_IT+0xe2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa0:	e013      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x10a>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_IC_Start_IT+0xf2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x10a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_IC_Start_IT+0x102>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x10a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_IC_Start_IT+0x11a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad8:	e013      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x142>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_IC_Start_IT+0x12a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x142>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_IC_Start_IT+0x13a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af8:	e003      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x142>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d841      	bhi.n	8003b8c <HAL_TIM_IC_Start_IT+0x1cc>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_TIM_IC_Start_IT+0x150>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b8d 	.word	0x08003b8d
 8003b18:	08003b8d 	.word	0x08003b8d
 8003b1c:	08003b8d 	.word	0x08003b8d
 8003b20:	08003b57 	.word	0x08003b57
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003b8d 	.word	0x08003b8d
 8003b2c:	08003b8d 	.word	0x08003b8d
 8003b30:	08003b69 	.word	0x08003b69
 8003b34:	08003b8d 	.word	0x08003b8d
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003b8d 	.word	0x08003b8d
 8003b40:	08003b7b 	.word	0x08003b7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0202 	orr.w	r2, r2, #2
 8003b52:	60da      	str	r2, [r3, #12]
      break;
 8003b54:	e01d      	b.n	8003b92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	60da      	str	r2, [r3, #12]
      break;
 8003b66:	e014      	b.n	8003b92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0208 	orr.w	r2, r2, #8
 8003b76:	60da      	str	r2, [r3, #12]
      break;
 8003b78:	e00b      	b.n	8003b92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0210 	orr.w	r2, r2, #16
 8003b88:	60da      	str	r2, [r3, #12]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b90:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d14e      	bne.n	8003c36 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f925 	bl	8004df0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_TIM_IC_Start_IT+0x280>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <HAL_TIM_IC_Start_IT+0x284>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <HAL_TIM_IC_Start_IT+0x288>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <HAL_TIM_IC_Start_IT+0x28c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <HAL_TIM_IC_Start_IT+0x290>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_TIM_IC_Start_IT+0x294>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x236>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_TIM_IC_Start_IT+0x298>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d115      	bne.n	8003c22 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_TIM_IC_Start_IT+0x29c>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d015      	beq.n	8003c34 <HAL_TIM_IC_Start_IT+0x274>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0e:	d011      	beq.n	8003c34 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	e008      	b.n	8003c34 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e000      	b.n	8003c36 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40001800 	.word	0x40001800
 8003c5c:	00010007 	.word	0x00010007

08003c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0202 	mvn.w	r2, #2
 8003c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd f88c 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fbc0 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fbc7 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0204 	mvn.w	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd f862 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fb96 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb9d 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0208 	mvn.w	r2, #8
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd f838 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fb6c 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fb73 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd f80e 	bl	8000dc0 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb42 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb49 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0201 	mvn.w	r2, #1
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fb1c 	bl	800441c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b80      	cmp	r3, #128	; 0x80
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 f8ae 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f8a1 	bl	8004f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 faf7 	bl	8004458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0220 	mvn.w	r2, #32
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f861 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_IC_ConfigChannel+0x1e>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e088      	b.n	8003fce <HAL_TIM_IC_ConfigChannel+0x130>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11b      	bne.n	8003f02 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f000 fdc5 	bl	8004a68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 020c 	bic.w	r2, r2, #12
 8003eec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6999      	ldr	r1, [r3, #24]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
 8003f00:	e060      	b.n	8003fc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d11c      	bne.n	8003f42 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f000 fe49 	bl	8004bae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f2a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6999      	ldr	r1, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021a      	lsls	r2, r3, #8
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	619a      	str	r2, [r3, #24]
 8003f40:	e040      	b.n	8003fc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f000 fe96 	bl	8004c88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 020c 	bic.w	r2, r2, #12
 8003f6a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69d9      	ldr	r1, [r3, #28]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	e021      	b.n	8003fc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d11c      	bne.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f000 feb3 	bl	8004d00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fa8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69d9      	ldr	r1, [r3, #28]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	021a      	lsls	r2, r3, #8
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	61da      	str	r2, [r3, #28]
 8003fbe:	e001      	b.n	8003fc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e0ff      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b14      	cmp	r3, #20
 8004002:	f200 80f0 	bhi.w	80041e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004061 	.word	0x08004061
 8004010:	080041e7 	.word	0x080041e7
 8004014:	080041e7 	.word	0x080041e7
 8004018:	080041e7 	.word	0x080041e7
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080041e7 	.word	0x080041e7
 8004024:	080041e7 	.word	0x080041e7
 8004028:	080041e7 	.word	0x080041e7
 800402c:	080040e3 	.word	0x080040e3
 8004030:	080041e7 	.word	0x080041e7
 8004034:	080041e7 	.word	0x080041e7
 8004038:	080041e7 	.word	0x080041e7
 800403c:	08004123 	.word	0x08004123
 8004040:	080041e7 	.word	0x080041e7
 8004044:	080041e7 	.word	0x080041e7
 8004048:	080041e7 	.word	0x080041e7
 800404c:	08004165 	.word	0x08004165
 8004050:	080041e7 	.word	0x080041e7
 8004054:	080041e7 	.word	0x080041e7
 8004058:	080041e7 	.word	0x080041e7
 800405c:	080041a5 	.word	0x080041a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 faa0 	bl	80045ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
      break;
 800409e:	e0a5      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 faf2 	bl	8004690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	021a      	lsls	r2, r3, #8
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
      break;
 80040e0:	e084      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fb49 	bl	8004780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0208 	orr.w	r2, r2, #8
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0204 	bic.w	r2, r2, #4
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
      break;
 8004120:	e064      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb9f 	bl	800486c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
      break;
 8004162:	e043      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fbd6 	bl	800491c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041a2:	e023      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fc08 	bl	80049c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041e4:	e002      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIM_ConfigClockSource+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e0b4      	b.n	8004386 <HAL_TIM_ConfigClockSource+0x186>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_TIM_ConfigClockSource+0x190>)
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d03e      	beq.n	80042d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425a:	f200 8087 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	f000 8086 	beq.w	8004372 <HAL_TIM_ConfigClockSource+0x172>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	d87f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b70      	cmp	r3, #112	; 0x70
 800426e:	d01a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d87b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d050      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x11a>
 8004278:	2b60      	cmp	r3, #96	; 0x60
 800427a:	d877      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d03c      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xfa>
 8004280:	2b50      	cmp	r3, #80	; 0x50
 8004282:	d873      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d058      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x13a>
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d86f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b30      	cmp	r3, #48	; 0x30
 800428e:	d064      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 8004290:	2b30      	cmp	r3, #48	; 0x30
 8004292:	d86b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d060      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d867      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d05a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	e062      	b.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f000 fd7b 	bl	8004db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	609a      	str	r2, [r3, #8]
      break;
 80042d2:	e04f      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f000 fd64 	bl	8004db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f6:	609a      	str	r2, [r3, #8]
      break;
 80042f8:	e03c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	f000 fc22 	bl	8004b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2150      	movs	r1, #80	; 0x50
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fd31 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004318:	e02c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fc7e 	bl	8004c28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2160      	movs	r1, #96	; 0x60
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fd21 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004338:	e01c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fc02 	bl	8004b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fd11 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004358:	e00c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 fd08 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 800436a:	e003      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e000      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	fffeff88 	.word	0xfffeff88

08004394 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	d831      	bhi.n	800440c <HAL_TIM_ReadCapturedValue+0x78>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	080043ef 	.word	0x080043ef
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	08004403 	.word	0x08004403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	60fb      	str	r3, [r7, #12]

      break;
 80043ec:	e00f      	b.n	800440e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	60fb      	str	r3, [r7, #12]

      break;
 80043f6:	e00a      	b.n	800440e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	60fb      	str	r3, [r7, #12]

      break;
 8004400:	e005      	b.n	800440e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	60fb      	str	r3, [r7, #12]

      break;
 800440a:	e000      	b.n	800440e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800440c:	bf00      	nop
  }

  return tmpreg;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d00f      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <TIM_Base_SetConfig+0x118>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3b      	ldr	r2, [pc, #236]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <TIM_Base_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d027      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <TIM_Base_SetConfig+0x118>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d023      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	; (8004594 <TIM_Base_SetConfig+0x128>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <TIM_Base_SetConfig+0x12c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a26      	ldr	r2, [pc, #152]	; (800459c <TIM_Base_SetConfig+0x130>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <TIM_Base_SetConfig+0x134>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <TIM_Base_SetConfig+0x138>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <TIM_Base_SetConfig+0x13c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <TIM_Base_SetConfig+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	615a      	str	r2, [r3, #20]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800
 80045a0:	40001800 	.word	0x40001800
 80045a4:	40001c00 	.word	0x40001c00
 80045a8:	40002000 	.word	0x40002000

080045ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <TIM_OC1_SetConfig+0xd8>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0302 	bic.w	r3, r3, #2
 80045f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <TIM_OC1_SetConfig+0xdc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC1_SetConfig+0x64>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_OC1_SetConfig+0xe0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10c      	bne.n	800462a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0308 	bic.w	r3, r3, #8
 8004616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a16      	ldr	r2, [pc, #88]	; (8004688 <TIM_OC1_SetConfig+0xdc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_OC1_SetConfig+0x8e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a15      	ldr	r2, [pc, #84]	; (800468c <TIM_OC1_SetConfig+0xe0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d111      	bne.n	800465e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	fffeff8f 	.word	0xfffeff8f
 8004688:	40010000 	.word	0x40010000
 800468c:	40010400 	.word	0x40010400

08004690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0210 	bic.w	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <TIM_OC2_SetConfig+0xe4>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0320 	bic.w	r3, r3, #32
 80046da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a23      	ldr	r2, [pc, #140]	; (8004778 <TIM_OC2_SetConfig+0xe8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC2_SetConfig+0x68>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a22      	ldr	r2, [pc, #136]	; (800477c <TIM_OC2_SetConfig+0xec>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10d      	bne.n	8004714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <TIM_OC2_SetConfig+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_OC2_SetConfig+0x94>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <TIM_OC2_SetConfig+0xec>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d113      	bne.n	800474c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	feff8fff 	.word	0xfeff8fff
 8004778:	40010000 	.word	0x40010000
 800477c:	40010400 	.word	0x40010400

08004780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <TIM_OC3_SetConfig+0xe0>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <TIM_OC3_SetConfig+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC3_SetConfig+0x66>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a21      	ldr	r2, [pc, #132]	; (8004868 <TIM_OC3_SetConfig+0xe8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10d      	bne.n	8004802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a17      	ldr	r2, [pc, #92]	; (8004864 <TIM_OC3_SetConfig+0xe4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0x92>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a16      	ldr	r2, [pc, #88]	; (8004868 <TIM_OC3_SetConfig+0xe8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d113      	bne.n	800483a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	fffeff8f 	.word	0xfffeff8f
 8004864:	40010000 	.word	0x40010000
 8004868:	40010400 	.word	0x40010400

0800486c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <TIM_OC4_SetConfig+0xa4>)
 8004898:	4013      	ands	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <TIM_OC4_SetConfig+0xa8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC4_SetConfig+0x68>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <TIM_OC4_SetConfig+0xac>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d109      	bne.n	80048e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	feff8fff 	.word	0xfeff8fff
 8004914:	40010000 	.word	0x40010000
 8004918:	40010400 	.word	0x40010400

0800491c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <TIM_OC5_SetConfig+0x98>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800495c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <TIM_OC5_SetConfig+0x9c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_OC5_SetConfig+0x5e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <TIM_OC5_SetConfig+0xa0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d109      	bne.n	800498e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	621a      	str	r2, [r3, #32]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	fffeff8f 	.word	0xfffeff8f
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400

080049c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <TIM_OC6_SetConfig+0x9c>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	051b      	lsls	r3, r3, #20
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <TIM_OC6_SetConfig+0xa0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC6_SetConfig+0x60>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <TIM_OC6_SetConfig+0xa4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d109      	bne.n	8004a34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	feff8fff 	.word	0xfeff8fff
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400

08004a68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <TIM_TI1_SetConfig+0xcc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01b      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9c:	d017      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <TIM_TI1_SetConfig+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a24      	ldr	r2, [pc, #144]	; (8004b3c <TIM_TI1_SetConfig+0xd4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00f      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <TIM_TI1_SetConfig+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <TIM_TI1_SetConfig+0xdc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <TIM_TI1_SetConfig+0xe0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_TI1_SetConfig+0x66>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <TIM_TI1_SetConfig+0xe4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <TIM_TI1_SetConfig+0x6a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <TIM_TI1_SetConfig+0x6c>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e003      	b.n	8004af2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 030a 	and.w	r3, r3, #10
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 030a 	bic.w	r3, r3, #10
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f023 0210 	bic.w	r2, r3, #16
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f023 0210 	bic.w	r2, r3, #16
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	031b      	lsls	r3, r3, #12
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	031b      	lsls	r3, r3, #12
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	031b      	lsls	r3, r3, #12
 8004d58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f043 0307 	orr.w	r3, r3, #7
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2201      	movs	r2, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e06d      	b.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40001800 	.word	0x40001800

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fc44 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f82c 	bl	8005030 <UART_SetConfig>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa84 	bl	80054f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800500e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb0b 	bl	800563c <UART_CheckIdleState>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4ba6      	ldr	r3, [pc, #664]	; (80052f4 <UART_SetConfig+0x2c4>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	430b      	orrs	r3, r1
 8005066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a94      	ldr	r2, [pc, #592]	; (80052f8 <UART_SetConfig+0x2c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d120      	bne.n	80050ee <UART_SetConfig+0xbe>
 80050ac:	4b93      	ldr	r3, [pc, #588]	; (80052fc <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d816      	bhi.n	80050e8 <UART_SetConfig+0xb8>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x90>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050dd 	.word	0x080050dd
 80050c8:	080050d7 	.word	0x080050d7
 80050cc:	080050e3 	.word	0x080050e3
 80050d0:	2301      	movs	r3, #1
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e150      	b.n	8005378 <UART_SetConfig+0x348>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e14d      	b.n	8005378 <UART_SetConfig+0x348>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e14a      	b.n	8005378 <UART_SetConfig+0x348>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e147      	b.n	8005378 <UART_SetConfig+0x348>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e144      	b.n	8005378 <UART_SetConfig+0x348>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a83      	ldr	r2, [pc, #524]	; (8005300 <UART_SetConfig+0x2d0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d132      	bne.n	800515e <UART_SetConfig+0x12e>
 80050f8:	4b80      	ldr	r3, [pc, #512]	; (80052fc <UART_SetConfig+0x2cc>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d828      	bhi.n	8005158 <UART_SetConfig+0x128>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0xdc>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005141 	.word	0x08005141
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005159 	.word	0x08005159
 800511c:	0800514d 	.word	0x0800514d
 8005120:	08005159 	.word	0x08005159
 8005124:	08005159 	.word	0x08005159
 8005128:	08005159 	.word	0x08005159
 800512c:	08005147 	.word	0x08005147
 8005130:	08005159 	.word	0x08005159
 8005134:	08005159 	.word	0x08005159
 8005138:	08005159 	.word	0x08005159
 800513c:	08005153 	.word	0x08005153
 8005140:	2300      	movs	r3, #0
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e118      	b.n	8005378 <UART_SetConfig+0x348>
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e115      	b.n	8005378 <UART_SetConfig+0x348>
 800514c:	2304      	movs	r3, #4
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e112      	b.n	8005378 <UART_SetConfig+0x348>
 8005152:	2308      	movs	r3, #8
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e10f      	b.n	8005378 <UART_SetConfig+0x348>
 8005158:	2310      	movs	r3, #16
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e10c      	b.n	8005378 <UART_SetConfig+0x348>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a68      	ldr	r2, [pc, #416]	; (8005304 <UART_SetConfig+0x2d4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d120      	bne.n	80051aa <UART_SetConfig+0x17a>
 8005168:	4b64      	ldr	r3, [pc, #400]	; (80052fc <UART_SetConfig+0x2cc>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005172:	2b30      	cmp	r3, #48	; 0x30
 8005174:	d013      	beq.n	800519e <UART_SetConfig+0x16e>
 8005176:	2b30      	cmp	r3, #48	; 0x30
 8005178:	d814      	bhi.n	80051a4 <UART_SetConfig+0x174>
 800517a:	2b20      	cmp	r3, #32
 800517c:	d009      	beq.n	8005192 <UART_SetConfig+0x162>
 800517e:	2b20      	cmp	r3, #32
 8005180:	d810      	bhi.n	80051a4 <UART_SetConfig+0x174>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <UART_SetConfig+0x15c>
 8005186:	2b10      	cmp	r3, #16
 8005188:	d006      	beq.n	8005198 <UART_SetConfig+0x168>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x174>
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e0f2      	b.n	8005378 <UART_SetConfig+0x348>
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e0ef      	b.n	8005378 <UART_SetConfig+0x348>
 8005198:	2304      	movs	r3, #4
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e0ec      	b.n	8005378 <UART_SetConfig+0x348>
 800519e:	2308      	movs	r3, #8
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e0e9      	b.n	8005378 <UART_SetConfig+0x348>
 80051a4:	2310      	movs	r3, #16
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e0e6      	b.n	8005378 <UART_SetConfig+0x348>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a56      	ldr	r2, [pc, #344]	; (8005308 <UART_SetConfig+0x2d8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d120      	bne.n	80051f6 <UART_SetConfig+0x1c6>
 80051b4:	4b51      	ldr	r3, [pc, #324]	; (80052fc <UART_SetConfig+0x2cc>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051be:	2bc0      	cmp	r3, #192	; 0xc0
 80051c0:	d013      	beq.n	80051ea <UART_SetConfig+0x1ba>
 80051c2:	2bc0      	cmp	r3, #192	; 0xc0
 80051c4:	d814      	bhi.n	80051f0 <UART_SetConfig+0x1c0>
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d009      	beq.n	80051de <UART_SetConfig+0x1ae>
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d810      	bhi.n	80051f0 <UART_SetConfig+0x1c0>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <UART_SetConfig+0x1a8>
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d006      	beq.n	80051e4 <UART_SetConfig+0x1b4>
 80051d6:	e00b      	b.n	80051f0 <UART_SetConfig+0x1c0>
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e0cc      	b.n	8005378 <UART_SetConfig+0x348>
 80051de:	2302      	movs	r3, #2
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e0c9      	b.n	8005378 <UART_SetConfig+0x348>
 80051e4:	2304      	movs	r3, #4
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e0c6      	b.n	8005378 <UART_SetConfig+0x348>
 80051ea:	2308      	movs	r3, #8
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e0c3      	b.n	8005378 <UART_SetConfig+0x348>
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e0c0      	b.n	8005378 <UART_SetConfig+0x348>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a44      	ldr	r2, [pc, #272]	; (800530c <UART_SetConfig+0x2dc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <UART_SetConfig+0x21c>
 8005200:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <UART_SetConfig+0x2cc>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d017      	beq.n	8005240 <UART_SetConfig+0x210>
 8005210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005214:	d817      	bhi.n	8005246 <UART_SetConfig+0x216>
 8005216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521a:	d00b      	beq.n	8005234 <UART_SetConfig+0x204>
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d811      	bhi.n	8005246 <UART_SetConfig+0x216>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <UART_SetConfig+0x1fe>
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d006      	beq.n	800523a <UART_SetConfig+0x20a>
 800522c:	e00b      	b.n	8005246 <UART_SetConfig+0x216>
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e0a1      	b.n	8005378 <UART_SetConfig+0x348>
 8005234:	2302      	movs	r3, #2
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e09e      	b.n	8005378 <UART_SetConfig+0x348>
 800523a:	2304      	movs	r3, #4
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e09b      	b.n	8005378 <UART_SetConfig+0x348>
 8005240:	2308      	movs	r3, #8
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e098      	b.n	8005378 <UART_SetConfig+0x348>
 8005246:	2310      	movs	r3, #16
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e095      	b.n	8005378 <UART_SetConfig+0x348>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <UART_SetConfig+0x2e0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d125      	bne.n	80052a2 <UART_SetConfig+0x272>
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005264:	d017      	beq.n	8005296 <UART_SetConfig+0x266>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526a:	d817      	bhi.n	800529c <UART_SetConfig+0x26c>
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	d00b      	beq.n	800528a <UART_SetConfig+0x25a>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d811      	bhi.n	800529c <UART_SetConfig+0x26c>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x254>
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005280:	d006      	beq.n	8005290 <UART_SetConfig+0x260>
 8005282:	e00b      	b.n	800529c <UART_SetConfig+0x26c>
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e076      	b.n	8005378 <UART_SetConfig+0x348>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e073      	b.n	8005378 <UART_SetConfig+0x348>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e070      	b.n	8005378 <UART_SetConfig+0x348>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e06d      	b.n	8005378 <UART_SetConfig+0x348>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e06a      	b.n	8005378 <UART_SetConfig+0x348>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <UART_SetConfig+0x2e4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d138      	bne.n	800531e <UART_SetConfig+0x2ee>
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <UART_SetConfig+0x2cc>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052ba:	d017      	beq.n	80052ec <UART_SetConfig+0x2bc>
 80052bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052c0:	d82a      	bhi.n	8005318 <UART_SetConfig+0x2e8>
 80052c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c6:	d00b      	beq.n	80052e0 <UART_SetConfig+0x2b0>
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052cc:	d824      	bhi.n	8005318 <UART_SetConfig+0x2e8>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <UART_SetConfig+0x2aa>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d6:	d006      	beq.n	80052e6 <UART_SetConfig+0x2b6>
 80052d8:	e01e      	b.n	8005318 <UART_SetConfig+0x2e8>
 80052da:	2300      	movs	r3, #0
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e04b      	b.n	8005378 <UART_SetConfig+0x348>
 80052e0:	2302      	movs	r3, #2
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e048      	b.n	8005378 <UART_SetConfig+0x348>
 80052e6:	2304      	movs	r3, #4
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e045      	b.n	8005378 <UART_SetConfig+0x348>
 80052ec:	2308      	movs	r3, #8
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e042      	b.n	8005378 <UART_SetConfig+0x348>
 80052f2:	bf00      	nop
 80052f4:	efff69f3 	.word	0xefff69f3
 80052f8:	40011000 	.word	0x40011000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40004400 	.word	0x40004400
 8005304:	40004800 	.word	0x40004800
 8005308:	40004c00 	.word	0x40004c00
 800530c:	40005000 	.word	0x40005000
 8005310:	40011400 	.word	0x40011400
 8005314:	40007800 	.word	0x40007800
 8005318:	2310      	movs	r3, #16
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e02c      	b.n	8005378 <UART_SetConfig+0x348>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a72      	ldr	r2, [pc, #456]	; (80054ec <UART_SetConfig+0x4bc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d125      	bne.n	8005374 <UART_SetConfig+0x344>
 8005328:	4b71      	ldr	r3, [pc, #452]	; (80054f0 <UART_SetConfig+0x4c0>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005332:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005336:	d017      	beq.n	8005368 <UART_SetConfig+0x338>
 8005338:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800533c:	d817      	bhi.n	800536e <UART_SetConfig+0x33e>
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005342:	d00b      	beq.n	800535c <UART_SetConfig+0x32c>
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005348:	d811      	bhi.n	800536e <UART_SetConfig+0x33e>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <UART_SetConfig+0x326>
 800534e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005352:	d006      	beq.n	8005362 <UART_SetConfig+0x332>
 8005354:	e00b      	b.n	800536e <UART_SetConfig+0x33e>
 8005356:	2300      	movs	r3, #0
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e00d      	b.n	8005378 <UART_SetConfig+0x348>
 800535c:	2302      	movs	r3, #2
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e00a      	b.n	8005378 <UART_SetConfig+0x348>
 8005362:	2304      	movs	r3, #4
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e007      	b.n	8005378 <UART_SetConfig+0x348>
 8005368:	2308      	movs	r3, #8
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x348>
 800536e:	2310      	movs	r3, #16
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e001      	b.n	8005378 <UART_SetConfig+0x348>
 8005374:	2310      	movs	r3, #16
 8005376:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d15b      	bne.n	800543a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d828      	bhi.n	80053da <UART_SetConfig+0x3aa>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x360>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fd fce2 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80053b8:	61b8      	str	r0, [r7, #24]
        break;
 80053ba:	e013      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fd fcf2 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80053c0:	61b8      	str	r0, [r7, #24]
        break;
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b4b      	ldr	r3, [pc, #300]	; (80054f4 <UART_SetConfig+0x4c4>)
 80053c6:	61bb      	str	r3, [r7, #24]
        break;
 80053c8:	e00c      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fd fbc5 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80053ce:	61b8      	str	r0, [r7, #24]
        break;
 80053d0:	e008      	b.n	80053e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d6:	61bb      	str	r3, [r7, #24]
        break;
 80053d8:	e004      	b.n	80053e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77bb      	strb	r3, [r7, #30]
        break;
 80053e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d074      	beq.n	80054d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d916      	bls.n	8005434 <UART_SetConfig+0x404>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540c:	d212      	bcs.n	8005434 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f023 030f 	bic.w	r3, r3, #15
 8005416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	b29b      	uxth	r3, r3
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	b29a      	uxth	r2, r3
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	4313      	orrs	r3, r2
 8005428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	89fa      	ldrh	r2, [r7, #14]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	e04f      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	77bb      	strb	r3, [r7, #30]
 8005438:	e04c      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d828      	bhi.n	8005492 <UART_SetConfig+0x462>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x418>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fd fc86 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8005470:	61b8      	str	r0, [r7, #24]
        break;
 8005472:	e013      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fd fc96 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8005478:	61b8      	str	r0, [r7, #24]
        break;
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <UART_SetConfig+0x4c4>)
 800547e:	61bb      	str	r3, [r7, #24]
        break;
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fd fb69 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005486:	61b8      	str	r0, [r7, #24]
        break;
 8005488:	e008      	b.n	800549c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	77bb      	strb	r3, [r7, #30]
        break;
 800549a:	bf00      	nop
    }

    if (pclk != 0U)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	085a      	lsrs	r2, r3, #1
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d909      	bls.n	80054d0 <UART_SetConfig+0x4a0>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c2:	d205      	bcs.n	80054d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	e001      	b.n	80054d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40007c00 	.word	0x40007c00
 80054f0:	40023800 	.word	0x40023800
 80054f4:	00f42400 	.word	0x00f42400

080054f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d10a      	bne.n	800560e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564c:	f7fc fa94 	bl	8001b78 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10e      	bne.n	800567e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f81b 	bl	80056aa <UART_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e011      	b.n	80056a2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b09c      	sub	sp, #112	; 0x70
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ba:	e0a7      	b.n	800580c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	f000 80a3 	beq.w	800580c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fc fa57 	bl	8001b78 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <UART_WaitOnFlagUntilTimeout+0x32>
 80056d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d13f      	bne.n	800575c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f0:	667b      	str	r3, [r7, #100]	; 0x64
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800572e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e068      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d050      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	d148      	bne.n	800580c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005782:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
 80057a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e6      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	613b      	str	r3, [r7, #16]
   return(result);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057d6:	623a      	str	r2, [r7, #32]
 80057d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	69f9      	ldr	r1, [r7, #28]
 80057dc:	6a3a      	ldr	r2, [r7, #32]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e010      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	f43f af48 	beq.w	80056bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3770      	adds	r7, #112	; 0x70
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005838:	b084      	sub	sp, #16
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	f107 001c 	add.w	r0, r7, #28
 8005846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d120      	bne.n	8005892 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <USB_CoreInit+0xac>)
 8005862:	4013      	ands	r3, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d105      	bne.n	8005886 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa96 	bl	8005db8 <USB_CoreReset>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e010      	b.n	80058b4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa8a 	bl	8005db8 <USB_CoreReset>
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10b      	bne.n	80058d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f043 0206 	orr.w	r2, r3, #6
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058de:	b004      	add	sp, #16
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	ffbdffbf 	.word	0xffbdffbf

080058e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f023 0201 	bic.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d115      	bne.n	8005958 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005938:	2001      	movs	r0, #1
 800593a:	f7fc f929 	bl	8001b90 <HAL_Delay>
      ms++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa29 	bl	8005d9c <USB_GetMode>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d01e      	beq.n	800598e <USB_SetCurrentMode+0x84>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b31      	cmp	r3, #49	; 0x31
 8005954:	d9f0      	bls.n	8005938 <USB_SetCurrentMode+0x2e>
 8005956:	e01a      	b.n	800598e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d115      	bne.n	800598a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800596a:	2001      	movs	r0, #1
 800596c:	f7fc f910 	bl	8001b90 <HAL_Delay>
      ms++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa10 	bl	8005d9c <USB_GetMode>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <USB_SetCurrentMode+0x84>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b31      	cmp	r3, #49	; 0x31
 8005986:	d9f0      	bls.n	800596a <USB_SetCurrentMode+0x60>
 8005988:	e001      	b.n	800598e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e005      	b.n	800599a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b32      	cmp	r3, #50	; 0x32
 8005992:	d101      	bne.n	8005998 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a4:	b084      	sub	sp, #16
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e009      	b.n	80059d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3301      	adds	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b0e      	cmp	r3, #14
 80059dc:	d9f2      	bls.n	80059c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11c      	bne.n	8005a1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e005      	b.n	8005a2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	461a      	mov	r2, r3
 8005a46:	680b      	ldr	r3, [r1, #0]
 8005a48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10c      	bne.n	8005a6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a56:	2100      	movs	r1, #0
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f965 	bl	8005d28 <USB_SetDevSpeed>
 8005a5e:	e008      	b.n	8005a72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a60:	2101      	movs	r1, #1
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f960 	bl	8005d28 <USB_SetDevSpeed>
 8005a68:	e003      	b.n	8005a72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a6a:	2103      	movs	r1, #3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f95b 	bl	8005d28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a72:	2110      	movs	r1, #16
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8f3 	bl	8005c60 <USB_FlushTxFifo>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f91f 	bl	8005cc8 <USB_FlushRxFifo>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	e043      	b.n	8005b46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad4:	d118      	bne.n	8005b08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	e013      	b.n	8005b1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e008      	b.n	8005b1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	461a      	mov	r2, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	3301      	adds	r3, #1
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d3b7      	bcc.n	8005abe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	e043      	b.n	8005bdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6a:	d118      	bne.n	8005b9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e013      	b.n	8005bb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e008      	b.n	8005bb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3b7      	bcc.n	8005b54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f043 0210 	orr.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <USB_DevInit+0x2b4>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f043 0208 	orr.w	r2, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d105      	bne.n	8005c48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <USB_DevInit+0x2b8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c54:	b004      	add	sp, #16
 8005c56:	4770      	bx	lr
 8005c58:	803c3800 	.word	0x803c3800
 8005c5c:	40000004 	.word	0x40000004

08005c60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3301      	adds	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <USB_FlushTxFifo+0x64>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d901      	bls.n	8005c80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01b      	b.n	8005cb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	daf2      	bge.n	8005c6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	019b      	lsls	r3, r3, #6
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <USB_FlushTxFifo+0x64>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d0f0      	beq.n	8005c98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	00030d40 	.word	0x00030d40

08005cc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <USB_FlushRxFifo+0x5c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e018      	b.n	8005d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	daf2      	bge.n	8005cd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <USB_FlushRxFifo+0x5c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e006      	b.n	8005d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d0f0      	beq.n	8005cf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	00030d40 	.word	0x00030d40

08005d28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0301 	and.w	r3, r3, #1
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <USB_CoreReset+0x64>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e01b      	b.n	8005e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	daf2      	bge.n	8005dc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <USB_CoreReset+0x64>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e006      	b.n	8005e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d0f0      	beq.n	8005dee <USB_CoreReset+0x36>

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	00030d40 	.word	0x00030d40

08005e20 <__libc_init_array>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4d0d      	ldr	r5, [pc, #52]	; (8005e58 <__libc_init_array+0x38>)
 8005e24:	4c0d      	ldr	r4, [pc, #52]	; (8005e5c <__libc_init_array+0x3c>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	42a6      	cmp	r6, r4
 8005e2e:	d109      	bne.n	8005e44 <__libc_init_array+0x24>
 8005e30:	4d0b      	ldr	r5, [pc, #44]	; (8005e60 <__libc_init_array+0x40>)
 8005e32:	4c0c      	ldr	r4, [pc, #48]	; (8005e64 <__libc_init_array+0x44>)
 8005e34:	f000 f820 	bl	8005e78 <_init>
 8005e38:	1b64      	subs	r4, r4, r5
 8005e3a:	10a4      	asrs	r4, r4, #2
 8005e3c:	2600      	movs	r6, #0
 8005e3e:	42a6      	cmp	r6, r4
 8005e40:	d105      	bne.n	8005e4e <__libc_init_array+0x2e>
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
 8005e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e48:	4798      	blx	r3
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	e7ee      	b.n	8005e2c <__libc_init_array+0xc>
 8005e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e52:	4798      	blx	r3
 8005e54:	3601      	adds	r6, #1
 8005e56:	e7f2      	b.n	8005e3e <__libc_init_array+0x1e>
 8005e58:	08005eb0 	.word	0x08005eb0
 8005e5c:	08005eb0 	.word	0x08005eb0
 8005e60:	08005eb0 	.word	0x08005eb0
 8005e64:	08005eb4 	.word	0x08005eb4

08005e68 <memset>:
 8005e68:	4402      	add	r2, r0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <memset+0xa>
 8005e70:	4770      	bx	lr
 8005e72:	f803 1b01 	strb.w	r1, [r3], #1
 8005e76:	e7f9      	b.n	8005e6c <memset+0x4>

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
